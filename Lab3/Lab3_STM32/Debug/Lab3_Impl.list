
Lab3_Impl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003200  08003200  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003200  08003200  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003200  08003200  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003200  08003200  00013200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003204  08003204  00013204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000005c  08003264  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003264  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091c6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7f  00000000  00000000  0002924b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016974  00000000  00000000  0002c088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae12  00000000  00000000  000429fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000826fd  00000000  00000000  0004d80e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cff0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000cff60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031c8 	.word	0x080031c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080031c8 	.word	0x080031c8

0800014c <isButtonPressed>:
int KeyReg_2[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg_3[3] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimeOutForKeyPress =  300;
int button_flag[3] = {0, 0, 0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	//HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
	button_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000078 	.word	0x20000078

080001a0 <button_detector>:


GPIO_PinState button_detector(int index)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	switch (index) {
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	2b02      	cmp	r3, #2
 80001ac:	d017      	beq.n	80001de <button_detector+0x3e>
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc1b      	bgt.n	80001ec <button_detector+0x4c>
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d003      	beq.n	80001c2 <button_detector+0x22>
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d007      	beq.n	80001d0 <button_detector+0x30>
 80001c0:	e014      	b.n	80001ec <button_detector+0x4c>
		case 0:
			return HAL_GPIO_ReadPin(change_mode_GPIO_Port, change_mode_Pin);
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	480c      	ldr	r0, [pc, #48]	; (80001f8 <button_detector+0x58>)
 80001c8:	f001 ffd6 	bl	8002178 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	e00e      	b.n	80001ee <button_detector+0x4e>
			break;
		case 1:
			return HAL_GPIO_ReadPin(change_time_GPIO_Port, change_time_Pin);
 80001d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <button_detector+0x58>)
 80001d6:	f001 ffcf 	bl	8002178 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	e007      	b.n	80001ee <button_detector+0x4e>
			break;
		case 2:
			return HAL_GPIO_ReadPin(set_time_GPIO_Port, set_time_Pin);
 80001de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <button_detector+0x58>)
 80001e4:	f001 ffc8 	bl	8002178 <HAL_GPIO_ReadPin>
 80001e8:	4603      	mov	r3, r0
 80001ea:	e000      	b.n	80001ee <button_detector+0x4e>
			break;
		default:
			return NORMAL_STATE;
 80001ec:	2301      	movs	r3, #1
			break;
	}
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3708      	adds	r7, #8
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40011000 	.word	0x40011000

080001fc <getKeyInput>:


void getKeyInput(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	int i = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
	while(i < 3)
 8000206:	e05d      	b.n	80002c4 <getKeyInput+0xc8>
	{
		  KeyReg_0[i] = KeyReg_1[i];
 8000208:	4a32      	ldr	r2, [pc, #200]	; (80002d4 <getKeyInput+0xd8>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	4931      	ldr	r1, [pc, #196]	; (80002d8 <getKeyInput+0xdc>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg_1[i] = KeyReg_2[i];
 8000218:	4a30      	ldr	r2, [pc, #192]	; (80002dc <getKeyInput+0xe0>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	492c      	ldr	r1, [pc, #176]	; (80002d4 <getKeyInput+0xd8>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  KeyReg_2[i] = button_detector(i);
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f7ff ffb9 	bl	80001a0 <button_detector>
 800022e:	4603      	mov	r3, r0
 8000230:	4619      	mov	r1, r3
 8000232:	4a2a      	ldr	r2, [pc, #168]	; (80002dc <getKeyInput+0xe0>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if ((KeyReg_1[i] == KeyReg_0[i]) && (KeyReg_1[i] == KeyReg_2[i]))
 800023a:	4a26      	ldr	r2, [pc, #152]	; (80002d4 <getKeyInput+0xd8>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000242:	4925      	ldr	r1, [pc, #148]	; (80002d8 <getKeyInput+0xdc>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800024a:	429a      	cmp	r2, r3
 800024c:	d137      	bne.n	80002be <getKeyInput+0xc2>
 800024e:	4a21      	ldr	r2, [pc, #132]	; (80002d4 <getKeyInput+0xd8>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000256:	4921      	ldr	r1, [pc, #132]	; (80002dc <getKeyInput+0xe0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025e:	429a      	cmp	r2, r3
 8000260:	d12d      	bne.n	80002be <getKeyInput+0xc2>
		  {
		    if (KeyReg_2[i] != KeyReg_3[i])
 8000262:	4a1e      	ldr	r2, [pc, #120]	; (80002dc <getKeyInput+0xe0>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800026a:	491d      	ldr	r1, [pc, #116]	; (80002e0 <getKeyInput+0xe4>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000272:	429a      	cmp	r2, r3
 8000274:	d015      	beq.n	80002a2 <getKeyInput+0xa6>
		    {
		      KeyReg_3[i] = KeyReg_2[i];
 8000276:	4a19      	ldr	r2, [pc, #100]	; (80002dc <getKeyInput+0xe0>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <getKeyInput+0xe4>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		      if (KeyReg_3[i] == PRESSED_STATE)
 8000286:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <getKeyInput+0xe4>)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d115      	bne.n	80002be <getKeyInput+0xc2>
		      {
		        TimeOutForKeyPress = 300;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <getKeyInput+0xe8>)
 8000294:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000298:	601a      	str	r2, [r3, #0]
		        subKeyProcess(i);
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ff70 	bl	8000180 <subKeyProcess>
 80002a0:	e00d      	b.n	80002be <getKeyInput+0xc2>
		      }
		    }
		    else
		    {
		       TimeOutForKeyPress --;
 80002a2:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <getKeyInput+0xe8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3b01      	subs	r3, #1
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <getKeyInput+0xe8>)
 80002aa:	6013      	str	r3, [r2, #0]
		        if (TimeOutForKeyPress == 0)
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <getKeyInput+0xe8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d104      	bne.n	80002be <getKeyInput+0xc2>
		        {
		          KeyReg_3[i] = NORMAL_STATE;
 80002b4:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <getKeyInput+0xe4>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2101      	movs	r1, #1
 80002ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		        }
		    }
		  }
		i++;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3301      	adds	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
	while(i < 3)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	dd9e      	ble.n	8000208 <getKeyInput+0xc>
	}
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000000c 	.word	0x2000000c
 80002d8:	20000000 	.word	0x20000000
 80002dc:	20000018 	.word	0x20000018
 80002e0:	20000024 	.word	0x20000024
 80002e4:	20000030 	.word	0x20000030

080002e8 <reset_led>:
int tmp_green_led_time = 0;

int reality_balance = 180399;

void reset_led()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(led_north_south_red_GPIO_Port, led_north_south_red_Pin, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	2102      	movs	r1, #2
 80002f0:	480e      	ldr	r0, [pc, #56]	; (800032c <reset_led+0x44>)
 80002f2:	f001 ff58 	bl	80021a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_north_south_yellow_GPIO_Port, led_north_south_yellow_Pin, GPIO_PIN_SET);
 80002f6:	2201      	movs	r2, #1
 80002f8:	2104      	movs	r1, #4
 80002fa:	480c      	ldr	r0, [pc, #48]	; (800032c <reset_led+0x44>)
 80002fc:	f001 ff53 	bl	80021a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_north_south_green_GPIO_Port, led_north_south_green_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2108      	movs	r1, #8
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <reset_led+0x44>)
 8000306:	f001 ff4e 	bl	80021a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_east_west_red_GPIO_Port, led_east_west_red_Pin, GPIO_PIN_SET);
 800030a:	2201      	movs	r2, #1
 800030c:	2110      	movs	r1, #16
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <reset_led+0x44>)
 8000310:	f001 ff49 	bl	80021a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_east_west_yellow_GPIO_Port, led_east_west_yellow_Pin, GPIO_PIN_SET);
 8000314:	2201      	movs	r2, #1
 8000316:	2120      	movs	r1, #32
 8000318:	4804      	ldr	r0, [pc, #16]	; (800032c <reset_led+0x44>)
 800031a:	f001 ff44 	bl	80021a6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_east_west_green_GPIO_Port, led_east_west_green_Pin, GPIO_PIN_SET);
 800031e:	2201      	movs	r2, #1
 8000320:	2140      	movs	r1, #64	; 0x40
 8000322:	4802      	ldr	r0, [pc, #8]	; (800032c <reset_led+0x44>)
 8000324:	f001 ff3f 	bl	80021a6 <HAL_GPIO_WritePin>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	40010800 	.word	0x40010800

08000330 <mode_button_scan>:

//Nút 1: chọn chế độ
void mode_button_scan()
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	if(isButtonPressed(0) == 1)
 8000334:	2000      	movs	r0, #0
 8000336:	f7ff ff09 	bl	800014c <isButtonPressed>
 800033a:	4603      	mov	r3, r0
 800033c:	2b01      	cmp	r3, #1
 800033e:	d133      	bne.n	80003a8 <mode_button_scan+0x78>
	{
		tmp_red_led_time = red_traffic_led_time;
 8000340:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <mode_button_scan+0x84>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <mode_button_scan+0x88>)
 8000346:	6013      	str	r3, [r2, #0]
		tmp_yellow_led_time = yellow_traffic_led_time;
 8000348:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <mode_button_scan+0x8c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <mode_button_scan+0x90>)
 800034e:	6013      	str	r3, [r2, #0]
		tmp_green_led_time = green_traffic_led_time;
 8000350:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <mode_button_scan+0x94>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <mode_button_scan+0x98>)
 8000356:	6013      	str	r3, [r2, #0]
		reset_led();
 8000358:	f7ff ffc6 	bl	80002e8 <reset_led>
		switch (status_mode) {
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <mode_button_scan+0x9c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b65      	subs	r3, #101	; 0x65
 8000362:	2b03      	cmp	r3, #3
 8000364:	d822      	bhi.n	80003ac <mode_button_scan+0x7c>
 8000366:	a201      	add	r2, pc, #4	; (adr r2, 800036c <mode_button_scan+0x3c>)
 8000368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036c:	0800037d 	.word	0x0800037d
 8000370:	08000385 	.word	0x08000385
 8000374:	0800038d 	.word	0x0800038d
 8000378:	08000395 	.word	0x08000395
			case mode_1:
				status_mode = mode_2;
 800037c:	4b13      	ldr	r3, [pc, #76]	; (80003cc <mode_button_scan+0x9c>)
 800037e:	2266      	movs	r2, #102	; 0x66
 8000380:	601a      	str	r2, [r3, #0]
				break;
 8000382:	e014      	b.n	80003ae <mode_button_scan+0x7e>
			case mode_2:
				status_mode = mode_3;
 8000384:	4b11      	ldr	r3, [pc, #68]	; (80003cc <mode_button_scan+0x9c>)
 8000386:	2267      	movs	r2, #103	; 0x67
 8000388:	601a      	str	r2, [r3, #0]
				break;
 800038a:	e010      	b.n	80003ae <mode_button_scan+0x7e>
			case mode_3:
				status_mode = mode_4;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <mode_button_scan+0x9c>)
 800038e:	2268      	movs	r2, #104	; 0x68
 8000390:	601a      	str	r2, [r3, #0]
				break;
 8000392:	e00c      	b.n	80003ae <mode_button_scan+0x7e>
			case mode_4:
				status_mode = mode_1;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <mode_button_scan+0x9c>)
 8000396:	2265      	movs	r2, #101	; 0x65
 8000398:	601a      	str	r2, [r3, #0]
				status_traffic_led_north_south = init;
 800039a:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <mode_button_scan+0xa0>)
 800039c:	22ff      	movs	r2, #255	; 0xff
 800039e:	601a      	str	r2, [r3, #0]
				status_traffic_led_east_west = init;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <mode_button_scan+0xa4>)
 80003a2:	22ff      	movs	r2, #255	; 0xff
 80003a4:	601a      	str	r2, [r3, #0]
				break;
 80003a6:	e002      	b.n	80003ae <mode_button_scan+0x7e>
			default:
				break;
		}
	}
 80003a8:	bf00      	nop
 80003aa:	e000      	b.n	80003ae <mode_button_scan+0x7e>
				break;
 80003ac:	bf00      	nop
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000044 	.word	0x20000044
 80003b8:	20000084 	.word	0x20000084
 80003bc:	20000048 	.word	0x20000048
 80003c0:	20000088 	.word	0x20000088
 80003c4:	2000004c 	.word	0x2000004c
 80003c8:	2000008c 	.word	0x2000008c
 80003cc:	20000034 	.word	0x20000034
 80003d0:	2000003c 	.word	0x2000003c
 80003d4:	20000040 	.word	0x20000040

080003d8 <increase_button_scan>:

//Nút 2: Tăng lên
void increase_button_scan()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
	if (isButtonPressed(1) == 1)
 80003dc:	2001      	movs	r0, #1
 80003de:	f7ff feb5 	bl	800014c <isButtonPressed>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d137      	bne.n	8000458 <increase_button_scan+0x80>
	{
		switch(status_mode) {
 80003e8:	4b21      	ldr	r3, [pc, #132]	; (8000470 <increase_button_scan+0x98>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b68      	cmp	r3, #104	; 0x68
 80003ee:	d024      	beq.n	800043a <increase_button_scan+0x62>
 80003f0:	2b68      	cmp	r3, #104	; 0x68
 80003f2:	dc33      	bgt.n	800045c <increase_button_scan+0x84>
 80003f4:	2b66      	cmp	r3, #102	; 0x66
 80003f6:	d002      	beq.n	80003fe <increase_button_scan+0x26>
 80003f8:	2b67      	cmp	r3, #103	; 0x67
 80003fa:	d00f      	beq.n	800041c <increase_button_scan+0x44>
				{
					tmp_yellow_led_time = 100;
				}
				break;
			default:
				break;
 80003fc:	e02e      	b.n	800045c <increase_button_scan+0x84>
				tmp_red_led_time = tmp_red_led_time + 100;
 80003fe:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <increase_button_scan+0x9c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3364      	adds	r3, #100	; 0x64
 8000404:	4a1b      	ldr	r2, [pc, #108]	; (8000474 <increase_button_scan+0x9c>)
 8000406:	6013      	str	r3, [r2, #0]
				if(tmp_red_led_time > 9900)
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <increase_button_scan+0x9c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f242 62ac 	movw	r2, #9900	; 0x26ac
 8000410:	4293      	cmp	r3, r2
 8000412:	dd25      	ble.n	8000460 <increase_button_scan+0x88>
					tmp_red_led_time = 100;
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <increase_button_scan+0x9c>)
 8000416:	2264      	movs	r2, #100	; 0x64
 8000418:	601a      	str	r2, [r3, #0]
				break;
 800041a:	e021      	b.n	8000460 <increase_button_scan+0x88>
				tmp_yellow_led_time = tmp_yellow_led_time + 100;
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <increase_button_scan+0xa0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	3364      	adds	r3, #100	; 0x64
 8000422:	4a15      	ldr	r2, [pc, #84]	; (8000478 <increase_button_scan+0xa0>)
 8000424:	6013      	str	r3, [r2, #0]
				if(tmp_yellow_led_time > 9900)
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <increase_button_scan+0xa0>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f242 62ac 	movw	r2, #9900	; 0x26ac
 800042e:	4293      	cmp	r3, r2
 8000430:	dd18      	ble.n	8000464 <increase_button_scan+0x8c>
					tmp_yellow_led_time = 100;
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <increase_button_scan+0xa0>)
 8000434:	2264      	movs	r2, #100	; 0x64
 8000436:	601a      	str	r2, [r3, #0]
				break;
 8000438:	e014      	b.n	8000464 <increase_button_scan+0x8c>
				tmp_green_led_time = tmp_green_led_time + 100;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <increase_button_scan+0xa4>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	3364      	adds	r3, #100	; 0x64
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <increase_button_scan+0xa4>)
 8000442:	6013      	str	r3, [r2, #0]
				if(tmp_yellow_led_time > 9900)
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <increase_button_scan+0xa0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f242 62ac 	movw	r2, #9900	; 0x26ac
 800044c:	4293      	cmp	r3, r2
 800044e:	dd0b      	ble.n	8000468 <increase_button_scan+0x90>
					tmp_yellow_led_time = 100;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <increase_button_scan+0xa0>)
 8000452:	2264      	movs	r2, #100	; 0x64
 8000454:	601a      	str	r2, [r3, #0]
				break;
 8000456:	e007      	b.n	8000468 <increase_button_scan+0x90>
		}
	}
 8000458:	bf00      	nop
 800045a:	e006      	b.n	800046a <increase_button_scan+0x92>
				break;
 800045c:	bf00      	nop
 800045e:	e004      	b.n	800046a <increase_button_scan+0x92>
				break;
 8000460:	bf00      	nop
 8000462:	e002      	b.n	800046a <increase_button_scan+0x92>
				break;
 8000464:	bf00      	nop
 8000466:	e000      	b.n	800046a <increase_button_scan+0x92>
				break;
 8000468:	bf00      	nop
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000034 	.word	0x20000034
 8000474:	20000084 	.word	0x20000084
 8000478:	20000088 	.word	0x20000088
 800047c:	2000008c 	.word	0x2000008c

08000480 <reality_balance_red>:

void reality_balance_red()
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	if(tmp_red_led_time > 9900 || tmp_red_led_time < 900)
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <reality_balance_red+0x38>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f242 62ac 	movw	r2, #9900	; 0x26ac
 800048c:	4293      	cmp	r3, r2
 800048e:	dc04      	bgt.n	800049a <reality_balance_red+0x1a>
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <reality_balance_red+0x38>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000498:	da03      	bge.n	80004a2 <reality_balance_red+0x22>
	{
		tmp_red_led_time = 900;
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <reality_balance_red+0x38>)
 800049c:	f44f 7261 	mov.w	r2, #900	; 0x384
 80004a0:	601a      	str	r2, [r3, #0]
	}
	tmp_green_led_time = tmp_red_led_time - tmp_yellow_led_time;
 80004a2:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <reality_balance_red+0x38>)
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <reality_balance_red+0x3c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <reality_balance_red+0x40>)
 80004ae:	6013      	str	r3, [r2, #0]
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000084 	.word	0x20000084
 80004bc:	20000088 	.word	0x20000088
 80004c0:	2000008c 	.word	0x2000008c

080004c4 <reality_balance_green>:

void reality_balance_green()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	if(tmp_green_led_time < 600 || tmp_green_led_time > 9600)
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <reality_balance_green+0x38>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80004d0:	db04      	blt.n	80004dc <reality_balance_green+0x18>
 80004d2:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <reality_balance_green+0x38>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 80004da:	dd03      	ble.n	80004e4 <reality_balance_green+0x20>
	{
		tmp_red_led_time = 600;
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <reality_balance_green+0x3c>)
 80004de:	f44f 7216 	mov.w	r2, #600	; 0x258
 80004e2:	601a      	str	r2, [r3, #0]
	}
	tmp_red_led_time = tmp_green_led_time + tmp_yellow_led_time;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <reality_balance_green+0x38>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <reality_balance_green+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <reality_balance_green+0x3c>)
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000008c 	.word	0x2000008c
 8000500:	20000084 	.word	0x20000084
 8000504:	20000088 	.word	0x20000088

08000508 <reality_balance_set>:

void reality_balance_set()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
	if (reality_balance != 0)
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <reality_balance_set+0x34>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d010      	beq.n	8000536 <reality_balance_set+0x2e>
	{
		tmp_yellow_led_time = 300;
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <reality_balance_set+0x38>)
 8000516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800051a:	601a      	str	r2, [r3, #0]
		switch (status_mode) {
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <reality_balance_set+0x3c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b66      	cmp	r3, #102	; 0x66
 8000522:	d002      	beq.n	800052a <reality_balance_set+0x22>
 8000524:	2b68      	cmp	r3, #104	; 0x68
 8000526:	d003      	beq.n	8000530 <reality_balance_set+0x28>
				break;
			case mode_4:
				reality_balance_green();
				break;
			default:
				break;
 8000528:	e006      	b.n	8000538 <reality_balance_set+0x30>
				reality_balance_red();
 800052a:	f7ff ffa9 	bl	8000480 <reality_balance_red>
				break;
 800052e:	e003      	b.n	8000538 <reality_balance_set+0x30>
				reality_balance_green();
 8000530:	f7ff ffc8 	bl	80004c4 <reality_balance_green>
				break;
 8000534:	e000      	b.n	8000538 <reality_balance_set+0x30>
		}
	}
 8000536:	bf00      	nop
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000038 	.word	0x20000038
 8000540:	20000088 	.word	0x20000088
 8000544:	20000034 	.word	0x20000034

08000548 <set_button_scan>:

//Nút 3: Set mode
void set_button_scan()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	if(isButtonPressed(2) == 1)
 800054c:	2002      	movs	r0, #2
 800054e:	f7ff fdfd 	bl	800014c <isButtonPressed>
 8000552:	4603      	mov	r3, r0
 8000554:	2b01      	cmp	r3, #1
 8000556:	d10d      	bne.n	8000574 <set_button_scan+0x2c>
	{
		reality_balance_set();
 8000558:	f7ff ffd6 	bl	8000508 <reality_balance_set>
		red_traffic_led_time = tmp_red_led_time;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <set_button_scan+0x30>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <set_button_scan+0x34>)
 8000562:	6013      	str	r3, [r2, #0]
		yellow_traffic_led_time = tmp_yellow_led_time;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <set_button_scan+0x38>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <set_button_scan+0x3c>)
 800056a:	6013      	str	r3, [r2, #0]
		green_traffic_led_time = tmp_green_led_time;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <set_button_scan+0x40>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <set_button_scan+0x44>)
 8000572:	6013      	str	r3, [r2, #0]
	}
}
 8000574:	bf00      	nop
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000084 	.word	0x20000084
 800057c:	20000044 	.word	0x20000044
 8000580:	20000088 	.word	0x20000088
 8000584:	20000048 	.word	0x20000048
 8000588:	2000008c 	.word	0x2000008c
 800058c:	2000004c 	.word	0x2000004c

08000590 <fsm_mode>:

//Hàm chính
void fsm_mode()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	switch (status_mode) {
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <fsm_mode+0x80>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b68      	cmp	r3, #104	; 0x68
 800059a:	dc0f      	bgt.n	80005bc <fsm_mode+0x2c>
 800059c:	2b65      	cmp	r3, #101	; 0x65
 800059e:	db33      	blt.n	8000608 <fsm_mode+0x78>
 80005a0:	3b65      	subs	r3, #101	; 0x65
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d830      	bhi.n	8000608 <fsm_mode+0x78>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <fsm_mode+0x1c>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005c9 	.word	0x080005c9
 80005b0:	080005d3 	.word	0x080005d3
 80005b4:	080005e5 	.word	0x080005e5
 80005b8:	080005f7 	.word	0x080005f7
 80005bc:	2bff      	cmp	r3, #255	; 0xff
 80005be:	d123      	bne.n	8000608 <fsm_mode+0x78>
		case init:
			status_mode = mode_1;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <fsm_mode+0x80>)
 80005c2:	2265      	movs	r2, #101	; 0x65
 80005c4:	601a      	str	r2, [r3, #0]
			break;
 80005c6:	e020      	b.n	800060a <fsm_mode+0x7a>
		case mode_1:
			fsm_traffic_light();
 80005c8:	f000 fdf4 	bl	80011b4 <fsm_traffic_light>
			mode_button_scan();
 80005cc:	f7ff feb0 	bl	8000330 <mode_button_scan>
			break;
 80005d0:	e01b      	b.n	800060a <fsm_mode+0x7a>
		case mode_2:
			fsm_traffic_light();
 80005d2:	f000 fdef 	bl	80011b4 <fsm_traffic_light>
			mode_button_scan();
 80005d6:	f7ff feab 	bl	8000330 <mode_button_scan>
			increase_button_scan();
 80005da:	f7ff fefd 	bl	80003d8 <increase_button_scan>
			set_button_scan();
 80005de:	f7ff ffb3 	bl	8000548 <set_button_scan>
			break;
 80005e2:	e012      	b.n	800060a <fsm_mode+0x7a>
		case mode_3:
			fsm_traffic_light();
 80005e4:	f000 fde6 	bl	80011b4 <fsm_traffic_light>
			mode_button_scan();
 80005e8:	f7ff fea2 	bl	8000330 <mode_button_scan>
			increase_button_scan();
 80005ec:	f7ff fef4 	bl	80003d8 <increase_button_scan>
			set_button_scan();
 80005f0:	f7ff ffaa 	bl	8000548 <set_button_scan>
			break;
 80005f4:	e009      	b.n	800060a <fsm_mode+0x7a>
		case mode_4:
			fsm_traffic_light();
 80005f6:	f000 fddd 	bl	80011b4 <fsm_traffic_light>
			mode_button_scan();
 80005fa:	f7ff fe99 	bl	8000330 <mode_button_scan>
			increase_button_scan();
 80005fe:	f7ff feeb 	bl	80003d8 <increase_button_scan>
			set_button_scan();
 8000602:	f7ff ffa1 	bl	8000548 <set_button_scan>
			break;
 8000606:	e000      	b.n	800060a <fsm_mode+0x7a>
		default:
			break;
 8000608:	bf00      	nop

	}
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000034 	.word	0x20000034

08000614 <display_7_seg_north_south>:

int enable_trigger = 0;

// ########### Chức năng display 2 con led 7 đoạn ######################## //
void display_7_seg_north_south(int index)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b090      	sub	sp, #64	; 0x40
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* seg_a_GPIO_PORT = seg_north_south_a_GPIO_Port; uint16_t seg_a_PIN = seg_north_south_a_Pin;
 800061c:	4bb2      	ldr	r3, [pc, #712]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000620:	2304      	movs	r3, #4
 8000622:	877b      	strh	r3, [r7, #58]	; 0x3a
	GPIO_TypeDef* seg_b_GPIO_PORT = seg_north_south_b_GPIO_Port; uint16_t seg_b_PIN = seg_north_south_b_Pin;
 8000624:	4bb0      	ldr	r3, [pc, #704]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
 8000628:	2308      	movs	r3, #8
 800062a:	867b      	strh	r3, [r7, #50]	; 0x32
	GPIO_TypeDef* seg_c_GPIO_PORT = seg_north_south_c_GPIO_Port; uint16_t seg_c_PIN = seg_north_south_c_Pin;
 800062c:	4bae      	ldr	r3, [pc, #696]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000630:	2310      	movs	r3, #16
 8000632:	857b      	strh	r3, [r7, #42]	; 0x2a
	GPIO_TypeDef* seg_d_GPIO_PORT = seg_north_south_d_GPIO_Port; uint16_t seg_d_PIN = seg_north_south_d_Pin;
 8000634:	4bac      	ldr	r3, [pc, #688]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
 8000638:	2320      	movs	r3, #32
 800063a:	847b      	strh	r3, [r7, #34]	; 0x22
	GPIO_TypeDef* seg_e_GPIO_PORT = seg_north_south_e_GPIO_Port; uint16_t seg_e_PIN = seg_north_south_e_Pin;
 800063c:	4baa      	ldr	r3, [pc, #680]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	2340      	movs	r3, #64	; 0x40
 8000642:	837b      	strh	r3, [r7, #26]
	GPIO_TypeDef* seg_f_GPIO_PORT = seg_north_south_f_GPIO_Port; uint16_t seg_f_PIN = seg_north_south_f_Pin;
 8000644:	4ba8      	ldr	r3, [pc, #672]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	827b      	strh	r3, [r7, #18]
	GPIO_TypeDef* seg_g_GPIO_PORT = seg_north_south_g_GPIO_Port; uint16_t seg_g_PIN = seg_north_south_g_Pin;
 800064c:	4ba6      	ldr	r3, [pc, #664]	; (80008e8 <display_7_seg_north_south+0x2d4>)
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	817b      	strh	r3, [r7, #10]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b09      	cmp	r3, #9
 800065a:	f200 81c8 	bhi.w	80009ee <display_7_seg_north_south+0x3da>
 800065e:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <display_7_seg_north_south+0x50>)
 8000660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000664:	0800068d 	.word	0x0800068d
 8000668:	080006e3 	.word	0x080006e3
 800066c:	08000739 	.word	0x08000739
 8000670:	0800078f 	.word	0x0800078f
 8000674:	080007e5 	.word	0x080007e5
 8000678:	0800083b 	.word	0x0800083b
 800067c:	08000891 	.word	0x08000891
 8000680:	080008ed 	.word	0x080008ed
 8000684:	08000943 	.word	0x08000943
 8000688:	08000999 	.word	0x08000999
	switch (index) {
		case 0:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 800068c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000694:	f001 fd87 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000698:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800069a:	2200      	movs	r2, #0
 800069c:	4619      	mov	r1, r3
 800069e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006a0:	f001 fd81 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 80006a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80006ac:	f001 fd7b 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 80006b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006b2:	2200      	movs	r2, #0
 80006b4:	4619      	mov	r1, r3
 80006b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006b8:	f001 fd75 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 80006bc:	8b7b      	ldrh	r3, [r7, #26]
 80006be:	2200      	movs	r2, #0
 80006c0:	4619      	mov	r1, r3
 80006c2:	69f8      	ldr	r0, [r7, #28]
 80006c4:	f001 fd6f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 80006c8:	8a7b      	ldrh	r3, [r7, #18]
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	6978      	ldr	r0, [r7, #20]
 80006d0:	f001 fd69 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_SET);
 80006d4:	897b      	ldrh	r3, [r7, #10]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4619      	mov	r1, r3
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f001 fd63 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 80006e0:	e186      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 1:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_SET);
 80006e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80006e4:	2201      	movs	r2, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80006ea:	f001 fd5c 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 80006ee:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80006f0:	2200      	movs	r2, #0
 80006f2:	4619      	mov	r1, r3
 80006f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80006f6:	f001 fd56 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 80006fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000702:	f001 fd50 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_SET);
 8000706:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000708:	2201      	movs	r2, #1
 800070a:	4619      	mov	r1, r3
 800070c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800070e:	f001 fd4a 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2201      	movs	r2, #1
 8000716:	4619      	mov	r1, r3
 8000718:	69f8      	ldr	r0, [r7, #28]
 800071a:	f001 fd44 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 800071e:	8a7b      	ldrh	r3, [r7, #18]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	6978      	ldr	r0, [r7, #20]
 8000726:	f001 fd3e 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_SET);
 800072a:	897b      	ldrh	r3, [r7, #10]
 800072c:	2201      	movs	r2, #1
 800072e:	4619      	mov	r1, r3
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f001 fd38 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000736:	e15b      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 2:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000738:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000740:	f001 fd31 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000744:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000746:	2200      	movs	r2, #0
 8000748:	4619      	mov	r1, r3
 800074a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800074c:	f001 fd2b 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_SET);
 8000750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000752:	2201      	movs	r2, #1
 8000754:	4619      	mov	r1, r3
 8000756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000758:	f001 fd25 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 800075c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800075e:	2200      	movs	r2, #0
 8000760:	4619      	mov	r1, r3
 8000762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000764:	f001 fd1f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 8000768:	8b7b      	ldrh	r3, [r7, #26]
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	69f8      	ldr	r0, [r7, #28]
 8000770:	f001 fd19 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 8000774:	8a7b      	ldrh	r3, [r7, #18]
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	6978      	ldr	r0, [r7, #20]
 800077c:	f001 fd13 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000780:	897b      	ldrh	r3, [r7, #10]
 8000782:	2200      	movs	r2, #0
 8000784:	4619      	mov	r1, r3
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f001 fd0d 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 800078c:	e130      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 3:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 800078e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000796:	f001 fd06 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 800079a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007a2:	f001 fd00 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 80007a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80007ae:	f001 fcfa 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 80007b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007ba:	f001 fcf4 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 80007be:	8b7b      	ldrh	r3, [r7, #26]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	69f8      	ldr	r0, [r7, #28]
 80007c6:	f001 fcee 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 80007ca:	8a7b      	ldrh	r3, [r7, #18]
 80007cc:	2201      	movs	r2, #1
 80007ce:	4619      	mov	r1, r3
 80007d0:	6978      	ldr	r0, [r7, #20]
 80007d2:	f001 fce8 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 80007d6:	897b      	ldrh	r3, [r7, #10]
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	68f8      	ldr	r0, [r7, #12]
 80007de:	f001 fce2 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 80007e2:	e105      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 4:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_SET);
 80007e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80007e6:	2201      	movs	r2, #1
 80007e8:	4619      	mov	r1, r3
 80007ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80007ec:	f001 fcdb 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 80007f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80007f8:	f001 fcd5 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 80007fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000804:	f001 fccf 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_SET);
 8000808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800080a:	2201      	movs	r2, #1
 800080c:	4619      	mov	r1, r3
 800080e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000810:	f001 fcc9 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000814:	8b7b      	ldrh	r3, [r7, #26]
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	69f8      	ldr	r0, [r7, #28]
 800081c:	f001 fcc3 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000820:	8a7b      	ldrh	r3, [r7, #18]
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	6978      	ldr	r0, [r7, #20]
 8000828:	f001 fcbd 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 800082c:	897b      	ldrh	r3, [r7, #10]
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f001 fcb7 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000838:	e0da      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 5:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 800083a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800083c:	2200      	movs	r2, #0
 800083e:	4619      	mov	r1, r3
 8000840:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000842:	f001 fcb0 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_SET);
 8000846:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800084e:	f001 fcaa 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000852:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800085a:	f001 fca4 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 800085e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000866:	f001 fc9e 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 800086a:	8b7b      	ldrh	r3, [r7, #26]
 800086c:	2201      	movs	r2, #1
 800086e:	4619      	mov	r1, r3
 8000870:	69f8      	ldr	r0, [r7, #28]
 8000872:	f001 fc98 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000876:	8a7b      	ldrh	r3, [r7, #18]
 8000878:	2200      	movs	r2, #0
 800087a:	4619      	mov	r1, r3
 800087c:	6978      	ldr	r0, [r7, #20]
 800087e:	f001 fc92 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000882:	897b      	ldrh	r3, [r7, #10]
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f001 fc8c 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 800088e:	e0af      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 6:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000890:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000898:	f001 fc85 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_SET);
 800089c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800089e:	2201      	movs	r2, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80008a4:	f001 fc7f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 80008a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008aa:	2200      	movs	r2, #0
 80008ac:	4619      	mov	r1, r3
 80008ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80008b0:	f001 fc79 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 80008b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008bc:	f001 fc73 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 80008c0:	8b7b      	ldrh	r3, [r7, #26]
 80008c2:	2200      	movs	r2, #0
 80008c4:	4619      	mov	r1, r3
 80008c6:	69f8      	ldr	r0, [r7, #28]
 80008c8:	f001 fc6d 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 80008cc:	8a7b      	ldrh	r3, [r7, #18]
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	6978      	ldr	r0, [r7, #20]
 80008d4:	f001 fc67 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 80008d8:	897b      	ldrh	r3, [r7, #10]
 80008da:	2200      	movs	r2, #0
 80008dc:	4619      	mov	r1, r3
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f001 fc61 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 80008e4:	e084      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
 80008e6:	bf00      	nop
 80008e8:	40010c00 	.word	0x40010c00
		case 7:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 80008ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80008ee:	2200      	movs	r2, #0
 80008f0:	4619      	mov	r1, r3
 80008f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80008f4:	f001 fc57 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 80008f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000900:	f001 fc51 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800090c:	f001 fc4b 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_SET);
 8000910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000912:	2201      	movs	r2, #1
 8000914:	4619      	mov	r1, r3
 8000916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000918:	f001 fc45 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 800091c:	8b7b      	ldrh	r3, [r7, #26]
 800091e:	2201      	movs	r2, #1
 8000920:	4619      	mov	r1, r3
 8000922:	69f8      	ldr	r0, [r7, #28]
 8000924:	f001 fc3f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 8000928:	8a7b      	ldrh	r3, [r7, #18]
 800092a:	2201      	movs	r2, #1
 800092c:	4619      	mov	r1, r3
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f001 fc39 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_SET);
 8000934:	897b      	ldrh	r3, [r7, #10]
 8000936:	2201      	movs	r2, #1
 8000938:	4619      	mov	r1, r3
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f001 fc33 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000940:	e056      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 8:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000942:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800094a:	f001 fc2c 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 800094e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000950:	2200      	movs	r2, #0
 8000952:	4619      	mov	r1, r3
 8000954:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000956:	f001 fc26 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 800095a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000962:	f001 fc20 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800096e:	f001 fc1a 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 8000972:	8b7b      	ldrh	r3, [r7, #26]
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	69f8      	ldr	r0, [r7, #28]
 800097a:	f001 fc14 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 800097e:	8a7b      	ldrh	r3, [r7, #18]
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	6978      	ldr	r0, [r7, #20]
 8000986:	f001 fc0e 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 800098a:	897b      	ldrh	r3, [r7, #10]
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f001 fc08 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000996:	e02b      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		case 9:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000998:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80009a0:	f001 fc01 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 80009a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80009ac:	f001 fbfb 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 80009b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009b8:	f001 fbf5 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 80009bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80009be:	2200      	movs	r2, #0
 80009c0:	4619      	mov	r1, r3
 80009c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009c4:	f001 fbef 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 80009c8:	8b7b      	ldrh	r3, [r7, #26]
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	69f8      	ldr	r0, [r7, #28]
 80009d0:	f001 fbe9 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 80009d4:	8a7b      	ldrh	r3, [r7, #18]
 80009d6:	2200      	movs	r2, #0
 80009d8:	4619      	mov	r1, r3
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f001 fbe3 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 80009e0:	897b      	ldrh	r3, [r7, #10]
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f001 fbdd 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 80009ec:	e000      	b.n	80009f0 <display_7_seg_north_south+0x3dc>
		default:
			break;
 80009ee:	bf00      	nop
	}
}
 80009f0:	bf00      	nop
 80009f2:	3740      	adds	r7, #64	; 0x40
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <display_7_seg_east_west>:

void display_7_seg_east_west(int index)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b090      	sub	sp, #64	; 0x40
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	GPIO_TypeDef* seg_a_GPIO_PORT = seg_east_west_a_GPIO_Port; uint16_t seg_a_PIN = seg_east_west_a_Pin;
 8000a00:	4bb5      	ldr	r3, [pc, #724]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	877b      	strh	r3, [r7, #58]	; 0x3a
	GPIO_TypeDef* seg_b_GPIO_PORT = seg_east_west_b_GPIO_Port; uint16_t seg_b_PIN = seg_east_west_b_Pin;
 8000a0a:	4bb3      	ldr	r3, [pc, #716]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	867b      	strh	r3, [r7, #50]	; 0x32
	GPIO_TypeDef* seg_c_GPIO_PORT = seg_east_west_c_GPIO_Port; uint16_t seg_c_PIN = seg_east_west_c_Pin;
 8000a14:	4bb0      	ldr	r3, [pc, #704]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a1c:	857b      	strh	r3, [r7, #42]	; 0x2a
	GPIO_TypeDef* seg_d_GPIO_PORT = seg_east_west_d_GPIO_Port; uint16_t seg_d_PIN = seg_east_west_d_Pin;
 8000a1e:	4bae      	ldr	r3, [pc, #696]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
 8000a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a26:	847b      	strh	r3, [r7, #34]	; 0x22
	GPIO_TypeDef* seg_e_GPIO_PORT = seg_east_west_e_GPIO_Port; uint16_t seg_e_PIN = seg_east_west_e_Pin;
 8000a28:	4bab      	ldr	r3, [pc, #684]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a2a:	61fb      	str	r3, [r7, #28]
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	837b      	strh	r3, [r7, #26]
	GPIO_TypeDef* seg_f_GPIO_PORT = seg_east_west_f_GPIO_Port; uint16_t seg_f_PIN = seg_east_west_f_Pin;
 8000a32:	4ba9      	ldr	r3, [pc, #676]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a3a:	827b      	strh	r3, [r7, #18]
	GPIO_TypeDef* seg_g_GPIO_PORT = seg_east_west_g_GPIO_Port; uint16_t seg_g_PIN = seg_east_west_g_Pin;
 8000a3c:	4ba6      	ldr	r3, [pc, #664]	; (8000cd8 <display_7_seg_east_west+0x2e0>)
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a44:	817b      	strh	r3, [r7, #10]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	f200 81c8 	bhi.w	8000dde <display_7_seg_east_west+0x3e6>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <display_7_seg_east_west+0x5c>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000a7d 	.word	0x08000a7d
 8000a58:	08000ad3 	.word	0x08000ad3
 8000a5c:	08000b29 	.word	0x08000b29
 8000a60:	08000b7f 	.word	0x08000b7f
 8000a64:	08000bd5 	.word	0x08000bd5
 8000a68:	08000c2b 	.word	0x08000c2b
 8000a6c:	08000c81 	.word	0x08000c81
 8000a70:	08000cdd 	.word	0x08000cdd
 8000a74:	08000d33 	.word	0x08000d33
 8000a78:	08000d89 	.word	0x08000d89
	switch (index) {
		case 0:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000a7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000a84:	f001 fb8f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000a88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000a90:	f001 fb89 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000a94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000a96:	2200      	movs	r2, #0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a9c:	f001 fb83 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000aa8:	f001 fb7d 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 8000aac:	8b7b      	ldrh	r3, [r7, #26]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	69f8      	ldr	r0, [r7, #28]
 8000ab4:	f001 fb77 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000ab8:	8a7b      	ldrh	r3, [r7, #18]
 8000aba:	2200      	movs	r2, #0
 8000abc:	4619      	mov	r1, r3
 8000abe:	6978      	ldr	r0, [r7, #20]
 8000ac0:	f001 fb71 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_SET);
 8000ac4:	897b      	ldrh	r3, [r7, #10]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	68f8      	ldr	r0, [r7, #12]
 8000acc:	f001 fb6b 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000ad0:	e186      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 1:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_SET);
 8000ad2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ada:	f001 fb64 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000ade:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ae6:	f001 fb5e 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000aea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000af2:	f001 fb58 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_SET);
 8000af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000afe:	f001 fb52 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000b02:	8b7b      	ldrh	r3, [r7, #26]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	69f8      	ldr	r0, [r7, #28]
 8000b0a:	f001 fb4c 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 8000b0e:	8a7b      	ldrh	r3, [r7, #18]
 8000b10:	2201      	movs	r2, #1
 8000b12:	4619      	mov	r1, r3
 8000b14:	6978      	ldr	r0, [r7, #20]
 8000b16:	f001 fb46 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_SET);
 8000b1a:	897b      	ldrh	r3, [r7, #10]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4619      	mov	r1, r3
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f001 fb40 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000b26:	e15b      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 2:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000b28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000b30:	f001 fb39 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000b34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b3c:	f001 fb33 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_SET);
 8000b40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b42:	2201      	movs	r2, #1
 8000b44:	4619      	mov	r1, r3
 8000b46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b48:	f001 fb2d 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b54:	f001 fb27 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 8000b58:	8b7b      	ldrh	r3, [r7, #26]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	69f8      	ldr	r0, [r7, #28]
 8000b60:	f001 fb21 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 8000b64:	8a7b      	ldrh	r3, [r7, #18]
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	6978      	ldr	r0, [r7, #20]
 8000b6c:	f001 fb1b 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000b70:	897b      	ldrh	r3, [r7, #10]
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f001 fb15 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000b7c:	e130      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 3:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000b7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000b86:	f001 fb0e 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000b8a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b92:	f001 fb08 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000b96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b98:	2200      	movs	r2, #0
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000b9e:	f001 fb02 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000ba2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000baa:	f001 fafc 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000bae:	8b7b      	ldrh	r3, [r7, #26]
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	69f8      	ldr	r0, [r7, #28]
 8000bb6:	f001 faf6 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 8000bba:	8a7b      	ldrh	r3, [r7, #18]
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f001 faf0 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000bc6:	897b      	ldrh	r3, [r7, #10]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4619      	mov	r1, r3
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f001 faea 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000bd2:	e105      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 4:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_SET);
 8000bd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4619      	mov	r1, r3
 8000bda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000bdc:	f001 fae3 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000be0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000be2:	2200      	movs	r2, #0
 8000be4:	4619      	mov	r1, r3
 8000be6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000be8:	f001 fadd 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000bec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bee:	2200      	movs	r2, #0
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000bf4:	f001 fad7 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_SET);
 8000bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c00:	f001 fad1 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000c04:	8b7b      	ldrh	r3, [r7, #26]
 8000c06:	2201      	movs	r2, #1
 8000c08:	4619      	mov	r1, r3
 8000c0a:	69f8      	ldr	r0, [r7, #28]
 8000c0c:	f001 facb 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000c10:	8a7b      	ldrh	r3, [r7, #18]
 8000c12:	2200      	movs	r2, #0
 8000c14:	4619      	mov	r1, r3
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f001 fac5 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000c1c:	897b      	ldrh	r3, [r7, #10]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4619      	mov	r1, r3
 8000c22:	68f8      	ldr	r0, [r7, #12]
 8000c24:	f001 fabf 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000c28:	e0da      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 5:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000c2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c32:	f001 fab8 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_SET);
 8000c36:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c3e:	f001 fab2 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000c42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c4a:	f001 faac 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000c4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c56:	f001 faa6 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000c5a:	8b7b      	ldrh	r3, [r7, #26]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	69f8      	ldr	r0, [r7, #28]
 8000c62:	f001 faa0 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000c66:	8a7b      	ldrh	r3, [r7, #18]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f001 fa9a 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000c72:	897b      	ldrh	r3, [r7, #10]
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f001 fa94 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000c7e:	e0af      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 6:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000c80:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c88:	f001 fa8d 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_SET);
 8000c8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c94:	f001 fa87 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000c98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ca0:	f001 fa81 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000ca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	4619      	mov	r1, r3
 8000caa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000cac:	f001 fa7b 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 8000cb0:	8b7b      	ldrh	r3, [r7, #26]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	69f8      	ldr	r0, [r7, #28]
 8000cb8:	f001 fa75 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000cbc:	8a7b      	ldrh	r3, [r7, #18]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f001 fa6f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000cc8:	897b      	ldrh	r3, [r7, #10]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4619      	mov	r1, r3
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f001 fa69 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000cd4:	e084      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
 8000cd6:	bf00      	nop
 8000cd8:	40010c00 	.word	0x40010c00
		case 7:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000cdc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ce4:	f001 fa5f 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000ce8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cea:	2200      	movs	r2, #0
 8000cec:	4619      	mov	r1, r3
 8000cee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cf0:	f001 fa59 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000cf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000cfc:	f001 fa53 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_SET);
 8000d00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d02:	2201      	movs	r2, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d08:	f001 fa4d 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000d0c:	8b7b      	ldrh	r3, [r7, #26]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4619      	mov	r1, r3
 8000d12:	69f8      	ldr	r0, [r7, #28]
 8000d14:	f001 fa47 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_SET);
 8000d18:	8a7b      	ldrh	r3, [r7, #18]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f001 fa41 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_SET);
 8000d24:	897b      	ldrh	r3, [r7, #10]
 8000d26:	2201      	movs	r2, #1
 8000d28:	4619      	mov	r1, r3
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f001 fa3b 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000d30:	e056      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 8:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000d32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d34:	2200      	movs	r2, #0
 8000d36:	4619      	mov	r1, r3
 8000d38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d3a:	f001 fa34 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000d3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d40:	2200      	movs	r2, #0
 8000d42:	4619      	mov	r1, r3
 8000d44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d46:	f001 fa2e 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d52:	f001 fa28 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000d56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000d5e:	f001 fa22 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_RESET);
 8000d62:	8b7b      	ldrh	r3, [r7, #26]
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	69f8      	ldr	r0, [r7, #28]
 8000d6a:	f001 fa1c 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000d6e:	8a7b      	ldrh	r3, [r7, #18]
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f001 fa16 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000d7a:	897b      	ldrh	r3, [r7, #10]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f001 fa10 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000d86:	e02b      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		case 9:
			HAL_GPIO_WritePin(seg_a_GPIO_PORT, seg_a_PIN, GPIO_PIN_RESET);
 8000d88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d90:	f001 fa09 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_b_GPIO_PORT, seg_b_PIN, GPIO_PIN_RESET);
 8000d94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d96:	2200      	movs	r2, #0
 8000d98:	4619      	mov	r1, r3
 8000d9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d9c:	f001 fa03 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_c_GPIO_PORT, seg_c_PIN, GPIO_PIN_RESET);
 8000da0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000da8:	f001 f9fd 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_d_GPIO_PORT, seg_d_PIN, GPIO_PIN_RESET);
 8000dac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dae:	2200      	movs	r2, #0
 8000db0:	4619      	mov	r1, r3
 8000db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000db4:	f001 f9f7 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_e_GPIO_PORT, seg_e_PIN, GPIO_PIN_SET);
 8000db8:	8b7b      	ldrh	r3, [r7, #26]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	69f8      	ldr	r0, [r7, #28]
 8000dc0:	f001 f9f1 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_f_GPIO_PORT, seg_f_PIN, GPIO_PIN_RESET);
 8000dc4:	8a7b      	ldrh	r3, [r7, #18]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f001 f9eb 	bl	80021a6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(seg_g_GPIO_PORT, seg_g_PIN, GPIO_PIN_RESET);
 8000dd0:	897b      	ldrh	r3, [r7, #10]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	f001 f9e5 	bl	80021a6 <HAL_GPIO_WritePin>
			break;
 8000ddc:	e000      	b.n	8000de0 <display_7_seg_east_west+0x3e8>
		default:
			break;
 8000dde:	bf00      	nop
	}
}
 8000de0:	bf00      	nop
 8000de2:	3740      	adds	r7, #64	; 0x40
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <display_traffic_led>:

// ########### Chức năng hiển thị dành cho đèn giao thông ################ //
void display_traffic_led(int color_traffic_led, int positon)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
	switch (positon) {
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <display_traffic_led+0x120>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d004      	beq.n	8000e04 <display_traffic_led+0x1c>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	4a43      	ldr	r2, [pc, #268]	; (8000f0c <display_traffic_led+0x124>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d03f      	beq.n	8000e82 <display_traffic_led+0x9a>
				default:
					break;
			}
			break;
		default:
			break;
 8000e02:	e07d      	b.n	8000f00 <display_traffic_led+0x118>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b20      	cmp	r3, #32
 8000e08:	d029      	beq.n	8000e5e <display_traffic_led+0x76>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b20      	cmp	r3, #32
 8000e0e:	dc36      	bgt.n	8000e7e <display_traffic_led+0x96>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b1e      	cmp	r3, #30
 8000e14:	d003      	beq.n	8000e1e <display_traffic_led+0x36>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b1f      	cmp	r3, #31
 8000e1a:	d010      	beq.n	8000e3e <display_traffic_led+0x56>
					break;
 8000e1c:	e02f      	b.n	8000e7e <display_traffic_led+0x96>
					HAL_GPIO_WritePin(led_north_south_red_GPIO_Port, led_north_south_red_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2102      	movs	r1, #2
 8000e22:	483b      	ldr	r0, [pc, #236]	; (8000f10 <display_traffic_led+0x128>)
 8000e24:	f001 f9bf 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_north_south_yellow_GPIO_Port, led_north_south_yellow_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4838      	ldr	r0, [pc, #224]	; (8000f10 <display_traffic_led+0x128>)
 8000e2e:	f001 f9ba 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_north_south_green_GPIO_Port, led_north_south_green_Pin, GPIO_PIN_SET);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2108      	movs	r1, #8
 8000e36:	4836      	ldr	r0, [pc, #216]	; (8000f10 <display_traffic_led+0x128>)
 8000e38:	f001 f9b5 	bl	80021a6 <HAL_GPIO_WritePin>
					break;
 8000e3c:	e020      	b.n	8000e80 <display_traffic_led+0x98>
					HAL_GPIO_WritePin(led_north_south_red_GPIO_Port, led_north_south_red_Pin, GPIO_PIN_SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2102      	movs	r1, #2
 8000e42:	4833      	ldr	r0, [pc, #204]	; (8000f10 <display_traffic_led+0x128>)
 8000e44:	f001 f9af 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_north_south_yellow_GPIO_Port, led_north_south_yellow_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4830      	ldr	r0, [pc, #192]	; (8000f10 <display_traffic_led+0x128>)
 8000e4e:	f001 f9aa 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_north_south_green_GPIO_Port, led_north_south_green_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2108      	movs	r1, #8
 8000e56:	482e      	ldr	r0, [pc, #184]	; (8000f10 <display_traffic_led+0x128>)
 8000e58:	f001 f9a5 	bl	80021a6 <HAL_GPIO_WritePin>
					break;
 8000e5c:	e010      	b.n	8000e80 <display_traffic_led+0x98>
					HAL_GPIO_WritePin(led_north_south_red_GPIO_Port, led_north_south_red_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2102      	movs	r1, #2
 8000e62:	482b      	ldr	r0, [pc, #172]	; (8000f10 <display_traffic_led+0x128>)
 8000e64:	f001 f99f 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_north_south_yellow_GPIO_Port, led_north_south_yellow_Pin, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4828      	ldr	r0, [pc, #160]	; (8000f10 <display_traffic_led+0x128>)
 8000e6e:	f001 f99a 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_north_south_green_GPIO_Port, led_north_south_green_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2108      	movs	r1, #8
 8000e76:	4826      	ldr	r0, [pc, #152]	; (8000f10 <display_traffic_led+0x128>)
 8000e78:	f001 f995 	bl	80021a6 <HAL_GPIO_WritePin>
					break;
 8000e7c:	e000      	b.n	8000e80 <display_traffic_led+0x98>
					break;
 8000e7e:	bf00      	nop
			break;
 8000e80:	e03e      	b.n	8000f00 <display_traffic_led+0x118>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b20      	cmp	r3, #32
 8000e86:	d029      	beq.n	8000edc <display_traffic_led+0xf4>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b20      	cmp	r3, #32
 8000e8c:	dc36      	bgt.n	8000efc <display_traffic_led+0x114>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b1e      	cmp	r3, #30
 8000e92:	d003      	beq.n	8000e9c <display_traffic_led+0xb4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b1f      	cmp	r3, #31
 8000e98:	d010      	beq.n	8000ebc <display_traffic_led+0xd4>
					break;
 8000e9a:	e02f      	b.n	8000efc <display_traffic_led+0x114>
					HAL_GPIO_WritePin(led_east_west_red_GPIO_Port, led_east_west_red_Pin, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	481b      	ldr	r0, [pc, #108]	; (8000f10 <display_traffic_led+0x128>)
 8000ea2:	f001 f980 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_east_west_yellow_GPIO_Port, led_east_west_yellow_Pin, GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4819      	ldr	r0, [pc, #100]	; (8000f10 <display_traffic_led+0x128>)
 8000eac:	f001 f97b 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_east_west_green_GPIO_Port, led_east_west_green_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2140      	movs	r1, #64	; 0x40
 8000eb4:	4816      	ldr	r0, [pc, #88]	; (8000f10 <display_traffic_led+0x128>)
 8000eb6:	f001 f976 	bl	80021a6 <HAL_GPIO_WritePin>
					break;
 8000eba:	e020      	b.n	8000efe <display_traffic_led+0x116>
					HAL_GPIO_WritePin(led_east_west_red_GPIO_Port, led_east_west_red_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <display_traffic_led+0x128>)
 8000ec2:	f001 f970 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_east_west_yellow_GPIO_Port, led_east_west_yellow_Pin, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2120      	movs	r1, #32
 8000eca:	4811      	ldr	r0, [pc, #68]	; (8000f10 <display_traffic_led+0x128>)
 8000ecc:	f001 f96b 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_east_west_green_GPIO_Port, led_east_west_green_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <display_traffic_led+0x128>)
 8000ed6:	f001 f966 	bl	80021a6 <HAL_GPIO_WritePin>
					break;
 8000eda:	e010      	b.n	8000efe <display_traffic_led+0x116>
					HAL_GPIO_WritePin(led_east_west_red_GPIO_Port, led_east_west_red_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2110      	movs	r1, #16
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <display_traffic_led+0x128>)
 8000ee2:	f001 f960 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_east_west_yellow_GPIO_Port, led_east_west_yellow_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2120      	movs	r1, #32
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <display_traffic_led+0x128>)
 8000eec:	f001 f95b 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_east_west_green_GPIO_Port, led_east_west_green_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	4806      	ldr	r0, [pc, #24]	; (8000f10 <display_traffic_led+0x128>)
 8000ef6:	f001 f956 	bl	80021a6 <HAL_GPIO_WritePin>
					break;
 8000efa:	e000      	b.n	8000efe <display_traffic_led+0x116>
					break;
 8000efc:	bf00      	nop
			break;
 8000efe:	bf00      	nop
	}
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	075bcd15 	.word	0x075bcd15
 8000f0c:	3ade68b1 	.word	0x3ade68b1
 8000f10:	40010800 	.word	0x40010800

08000f14 <tmp_val_init>:

// ########################################################### //

void tmp_val_init()
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
	tmp_red_traffic_led_time = red_traffic_led_time/100; // chuyển đổi sang đơn vị s.
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <tmp_val_init+0x48>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <tmp_val_init+0x4c>)
 8000f1e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f22:	1152      	asrs	r2, r2, #5
 8000f24:	17db      	asrs	r3, r3, #31
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <tmp_val_init+0x50>)
 8000f2a:	6013      	str	r3, [r2, #0]
	tmp_yellow_traffic_led_time = yellow_traffic_led_time/100;
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <tmp_val_init+0x54>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <tmp_val_init+0x4c>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1152      	asrs	r2, r2, #5
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <tmp_val_init+0x58>)
 8000f3e:	6013      	str	r3, [r2, #0]
	tmp_green_traffic_led_time = green_traffic_led_time/100;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <tmp_val_init+0x5c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <tmp_val_init+0x4c>)
 8000f46:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4a:	1152      	asrs	r2, r2, #5
 8000f4c:	17db      	asrs	r3, r3, #31
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <tmp_val_init+0x60>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000044 	.word	0x20000044
 8000f60:	51eb851f 	.word	0x51eb851f
 8000f64:	20000090 	.word	0x20000090
 8000f68:	20000048 	.word	0x20000048
 8000f6c:	20000094 	.word	0x20000094
 8000f70:	2000004c 	.word	0x2000004c
 8000f74:	20000098 	.word	0x20000098

08000f78 <tmp_val_overload>:

void tmp_val_overload()
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	if(tmp_red_traffic_led_time <= 0)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <tmp_val_overload+0x60>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dc09      	bgt.n	8000f98 <tmp_val_overload+0x20>
	{
		tmp_red_traffic_led_time = red_traffic_led_time/100;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <tmp_val_overload+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <tmp_val_overload+0x68>)
 8000f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f8e:	1152      	asrs	r2, r2, #5
 8000f90:	17db      	asrs	r3, r3, #31
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <tmp_val_overload+0x60>)
 8000f96:	6013      	str	r3, [r2, #0]
	}
	if(tmp_yellow_traffic_led_time <= 0)
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <tmp_val_overload+0x6c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	dc09      	bgt.n	8000fb4 <tmp_val_overload+0x3c>
	{
		tmp_yellow_traffic_led_time = yellow_traffic_led_time/100;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <tmp_val_overload+0x70>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <tmp_val_overload+0x68>)
 8000fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000faa:	1152      	asrs	r2, r2, #5
 8000fac:	17db      	asrs	r3, r3, #31
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <tmp_val_overload+0x6c>)
 8000fb2:	6013      	str	r3, [r2, #0]
	}
	if(tmp_green_traffic_led_time <= 0)
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <tmp_val_overload+0x74>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dc09      	bgt.n	8000fd0 <tmp_val_overload+0x58>
	{
		tmp_green_traffic_led_time = green_traffic_led_time/100;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <tmp_val_overload+0x78>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <tmp_val_overload+0x68>)
 8000fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc6:	1152      	asrs	r2, r2, #5
 8000fc8:	17db      	asrs	r3, r3, #31
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <tmp_val_overload+0x74>)
 8000fce:	6013      	str	r3, [r2, #0]
	}
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	20000044 	.word	0x20000044
 8000fe0:	51eb851f 	.word	0x51eb851f
 8000fe4:	20000094 	.word	0x20000094
 8000fe8:	20000048 	.word	0x20000048
 8000fec:	20000098 	.word	0x20000098
 8000ff0:	2000004c 	.word	0x2000004c

08000ff4 <number_processing>:

void number_processing(int current_tmp_time, int* index_0, int* index_1)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
	*index_0 = current_tmp_time/10;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <number_processing+0x44>)
 8001004:	fb82 1203 	smull	r1, r2, r2, r3
 8001008:	1092      	asrs	r2, r2, #2
 800100a:	17db      	asrs	r3, r3, #31
 800100c:	1ad2      	subs	r2, r2, r3
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
	*index_1 = current_tmp_time%10;
 8001012:	68f9      	ldr	r1, [r7, #12]
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <number_processing+0x44>)
 8001016:	fb83 2301 	smull	r2, r3, r3, r1
 800101a:	109a      	asrs	r2, r3, #2
 800101c:	17cb      	asrs	r3, r1, #31
 800101e:	1ad2      	subs	r2, r2, r3
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	1aca      	subs	r2, r1, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	66666667 	.word	0x66666667

0800103c <timer_scan_7seg>:

void timer_scan_7seg(int position, int* current_tmp_time)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	switch (position) {
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <timer_scan_7seg+0x64>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d004      	beq.n	8001058 <timer_scan_7seg+0x1c>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <timer_scan_7seg+0x68>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00e      	beq.n	8001074 <timer_scan_7seg+0x38>
				*current_tmp_time = *current_tmp_time - 1;
				Set_timer(100, east_west_7seg_time);
			}
			break;
		default:
			break;
 8001056:	e01e      	b.n	8001096 <timer_scan_7seg+0x5a>
			if(timer_flag[north_south_7seg_time] == 1)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <timer_scan_7seg+0x6c>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d117      	bne.n	8001090 <timer_scan_7seg+0x54>
				*current_tmp_time = *current_tmp_time - 1;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1e5a      	subs	r2, r3, #1
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	601a      	str	r2, [r3, #0]
				Set_timer(100, north_south_7seg_time);
 800106a:	2102      	movs	r1, #2
 800106c:	2064      	movs	r0, #100	; 0x64
 800106e:	f000 fc9b 	bl	80019a8 <Set_timer>
			break;
 8001072:	e00d      	b.n	8001090 <timer_scan_7seg+0x54>
			if(timer_flag[east_west_7seg_time] == 1)
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <timer_scan_7seg+0x6c>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10b      	bne.n	8001094 <timer_scan_7seg+0x58>
				*current_tmp_time = *current_tmp_time - 1;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	1e5a      	subs	r2, r3, #1
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	601a      	str	r2, [r3, #0]
				Set_timer(100, east_west_7seg_time);
 8001086:	2103      	movs	r1, #3
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f000 fc8d 	bl	80019a8 <Set_timer>
			break;
 800108e:	e001      	b.n	8001094 <timer_scan_7seg+0x58>
			break;
 8001090:	bf00      	nop
 8001092:	e000      	b.n	8001096 <timer_scan_7seg+0x5a>
			break;
 8001094:	bf00      	nop
	}
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	075bcd15 	.word	0x075bcd15
 80010a4:	3ade68b1 	.word	0x3ade68b1
 80010a8:	200000e8 	.word	0x200000e8

080010ac <enable_trigger_scan>:


void enable_trigger_scan()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	if(timer_flag[enable_time] == 1)
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <enable_trigger_scan+0x38>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d112      	bne.n	80010de <enable_trigger_scan+0x32>
	{
		switch (enable_trigger) {
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <enable_trigger_scan+0x3c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <enable_trigger_scan+0x1a>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d004      	beq.n	80010ce <enable_trigger_scan+0x22>
				break;
			case 1:
				enable_trigger = 0;
				break;
			default:
				break;
 80010c4:	e007      	b.n	80010d6 <enable_trigger_scan+0x2a>
				enable_trigger = 1;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <enable_trigger_scan+0x3c>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
				break;
 80010cc:	e003      	b.n	80010d6 <enable_trigger_scan+0x2a>
				enable_trigger = 0;
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <enable_trigger_scan+0x3c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
				break;
 80010d4:	bf00      	nop
		}
		Set_timer(50, enable_time);
 80010d6:	2104      	movs	r1, #4
 80010d8:	2032      	movs	r0, #50	; 0x32
 80010da:	f000 fc65 	bl	80019a8 <Set_timer>
	}
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000e8 	.word	0x200000e8
 80010e8:	2000009c 	.word	0x2000009c

080010ec <enable_display_7seg>:

void enable_display_7seg(int index_0, int index_1, int position)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
	switch (position) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <enable_display_7seg+0xb8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d004      	beq.n	800110a <enable_display_7seg+0x1e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a29      	ldr	r2, [pc, #164]	; (80011a8 <enable_display_7seg+0xbc>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d024      	beq.n	8001152 <enable_display_7seg+0x66>
				default:
					break;
			}
			break;
		default:
			break;
 8001108:	e047      	b.n	800119a <enable_display_7seg+0xae>
			switch (enable_trigger) {
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <enable_display_7seg+0xc0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <enable_display_7seg+0x2c>
 8001112:	2b01      	cmp	r3, #1
 8001114:	d00e      	beq.n	8001134 <enable_display_7seg+0x48>
					break;
 8001116:	e01b      	b.n	8001150 <enable_display_7seg+0x64>
					HAL_GPIO_WritePin(enable_0_GPIO_Port, enable_0_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2101      	movs	r1, #1
 800111c:	4824      	ldr	r0, [pc, #144]	; (80011b0 <enable_display_7seg+0xc4>)
 800111e:	f001 f842 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(enable_1_GPIO_Port, enable_1_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2102      	movs	r1, #2
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <enable_display_7seg+0xc4>)
 8001128:	f001 f83d 	bl	80021a6 <HAL_GPIO_WritePin>
					display_7_seg_north_south(index_0);
 800112c:	68f8      	ldr	r0, [r7, #12]
 800112e:	f7ff fa71 	bl	8000614 <display_7_seg_north_south>
					break;
 8001132:	e00d      	b.n	8001150 <enable_display_7seg+0x64>
					HAL_GPIO_WritePin(enable_0_GPIO_Port, enable_0_Pin, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	2101      	movs	r1, #1
 8001138:	481d      	ldr	r0, [pc, #116]	; (80011b0 <enable_display_7seg+0xc4>)
 800113a:	f001 f834 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(enable_1_GPIO_Port, enable_1_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <enable_display_7seg+0xc4>)
 8001144:	f001 f82f 	bl	80021a6 <HAL_GPIO_WritePin>
					display_7_seg_north_south(index_1);
 8001148:	68b8      	ldr	r0, [r7, #8]
 800114a:	f7ff fa63 	bl	8000614 <display_7_seg_north_south>
					break;
 800114e:	bf00      	nop
			break;
 8001150:	e023      	b.n	800119a <enable_display_7seg+0xae>
			switch (enable_trigger) {
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <enable_display_7seg+0xc0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <enable_display_7seg+0x74>
 800115a:	2b01      	cmp	r3, #1
 800115c:	d00e      	beq.n	800117c <enable_display_7seg+0x90>
					break;
 800115e:	e01b      	b.n	8001198 <enable_display_7seg+0xac>
					HAL_GPIO_WritePin(enable_0_GPIO_Port, enable_0_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2101      	movs	r1, #1
 8001164:	4812      	ldr	r0, [pc, #72]	; (80011b0 <enable_display_7seg+0xc4>)
 8001166:	f001 f81e 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(enable_1_GPIO_Port, enable_1_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	4810      	ldr	r0, [pc, #64]	; (80011b0 <enable_display_7seg+0xc4>)
 8001170:	f001 f819 	bl	80021a6 <HAL_GPIO_WritePin>
					display_7_seg_east_west(index_0);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff fc3f 	bl	80009f8 <display_7_seg_east_west>
					break;
 800117a:	e00d      	b.n	8001198 <enable_display_7seg+0xac>
					HAL_GPIO_WritePin(enable_0_GPIO_Port, enable_0_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2101      	movs	r1, #1
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <enable_display_7seg+0xc4>)
 8001182:	f001 f810 	bl	80021a6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(enable_1_GPIO_Port, enable_1_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <enable_display_7seg+0xc4>)
 800118c:	f001 f80b 	bl	80021a6 <HAL_GPIO_WritePin>
					display_7_seg_east_west(index_1);
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff fc31 	bl	80009f8 <display_7_seg_east_west>
					break;
 8001196:	bf00      	nop
			break;
 8001198:	bf00      	nop
	}
}
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	075bcd15 	.word	0x075bcd15
 80011a8:	3ade68b1 	.word	0x3ade68b1
 80011ac:	2000009c 	.word	0x2000009c
 80011b0:	40010c00 	.word	0x40010c00

080011b4 <fsm_traffic_light>:


//Chế độ FSM MODE 1
void fsm_traffic_light()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
	int initial_red_position = north_south; // bắt đầu vói hướng đông nam
 80011ba:	4bb6      	ldr	r3, [pc, #728]	; (8001494 <fsm_traffic_light+0x2e0>)
 80011bc:	60fb      	str	r3, [r7, #12]
	int index_0 = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
	int index_1 = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
	switch (initial_red_position) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4ab2      	ldr	r2, [pc, #712]	; (8001494 <fsm_traffic_light+0x2e0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d005      	beq.n	80011da <fsm_traffic_light+0x26>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4ab1      	ldr	r2, [pc, #708]	; (8001498 <fsm_traffic_light+0x2e4>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	f000 814c 	beq.w	8001470 <fsm_traffic_light+0x2bc>
				default:
					break;
			}
			break;
		default:
			break;
 80011d8:	e2ae      	b.n	8001738 <fsm_traffic_light+0x584>
			switch (status_traffic_led_north_south) {
 80011da:	4bb0      	ldr	r3, [pc, #704]	; (800149c <fsm_traffic_light+0x2e8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2bff      	cmp	r3, #255	; 0xff
 80011e0:	d00c      	beq.n	80011fc <fsm_traffic_light+0x48>
 80011e2:	2bff      	cmp	r3, #255	; 0xff
 80011e4:	f300 809d 	bgt.w	8001322 <fsm_traffic_light+0x16e>
 80011e8:	2b20      	cmp	r3, #32
 80011ea:	d072      	beq.n	80012d2 <fsm_traffic_light+0x11e>
 80011ec:	2b20      	cmp	r3, #32
 80011ee:	f300 8098 	bgt.w	8001322 <fsm_traffic_light+0x16e>
 80011f2:	2b1e      	cmp	r3, #30
 80011f4:	d01d      	beq.n	8001232 <fsm_traffic_light+0x7e>
 80011f6:	2b1f      	cmp	r3, #31
 80011f8:	d043      	beq.n	8001282 <fsm_traffic_light+0xce>
					break;
 80011fa:	e092      	b.n	8001322 <fsm_traffic_light+0x16e>
					display_traffic_led(red_traffic_led, north_south);
 80011fc:	49a5      	ldr	r1, [pc, #660]	; (8001494 <fsm_traffic_light+0x2e0>)
 80011fe:	201e      	movs	r0, #30
 8001200:	f7ff fdf2 	bl	8000de8 <display_traffic_led>
					status_traffic_led_north_south = red_traffic_led;
 8001204:	4ba5      	ldr	r3, [pc, #660]	; (800149c <fsm_traffic_light+0x2e8>)
 8001206:	221e      	movs	r2, #30
 8001208:	601a      	str	r2, [r3, #0]
					tmp_val_init();
 800120a:	f7ff fe83 	bl	8000f14 <tmp_val_init>
					enable_trigger = 0;
 800120e:	4ba4      	ldr	r3, [pc, #656]	; (80014a0 <fsm_traffic_light+0x2ec>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
					Set_timer(red_traffic_led_time, north_south_led_time);
 8001214:	4ba3      	ldr	r3, [pc, #652]	; (80014a4 <fsm_traffic_light+0x2f0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fbc4 	bl	80019a8 <Set_timer>
					Set_timer(100,north_south_7seg_time);
 8001220:	2102      	movs	r1, #2
 8001222:	2064      	movs	r0, #100	; 0x64
 8001224:	f000 fbc0 	bl	80019a8 <Set_timer>
					Set_timer(50, enable_time);
 8001228:	2104      	movs	r1, #4
 800122a:	2032      	movs	r0, #50	; 0x32
 800122c:	f000 fbbc 	bl	80019a8 <Set_timer>
					break;
 8001230:	e078      	b.n	8001324 <fsm_traffic_light+0x170>
					display_traffic_led(red_traffic_led, north_south);
 8001232:	4998      	ldr	r1, [pc, #608]	; (8001494 <fsm_traffic_light+0x2e0>)
 8001234:	201e      	movs	r0, #30
 8001236:	f7ff fdd7 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 800123a:	f7ff fe9d 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_red_traffic_led_time, &index_0, &index_1);
 800123e:	4b9a      	ldr	r3, [pc, #616]	; (80014a8 <fsm_traffic_light+0x2f4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	1d3a      	adds	r2, r7, #4
 8001244:	f107 0108 	add.w	r1, r7, #8
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fed3 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, north_south);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4a90      	ldr	r2, [pc, #576]	; (8001494 <fsm_traffic_light+0x2e0>)
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff49 	bl	80010ec <enable_display_7seg>
					if(timer_flag[north_south_led_time]== 1)
 800125a:	4b94      	ldr	r3, [pc, #592]	; (80014ac <fsm_traffic_light+0x2f8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d108      	bne.n	8001274 <fsm_traffic_light+0xc0>
						status_traffic_led_north_south = green_traffic_led;
 8001262:	4b8e      	ldr	r3, [pc, #568]	; (800149c <fsm_traffic_light+0x2e8>)
 8001264:	2220      	movs	r2, #32
 8001266:	601a      	str	r2, [r3, #0]
						Set_timer(green_traffic_led_time, north_south_led_time);
 8001268:	4b91      	ldr	r3, [pc, #580]	; (80014b0 <fsm_traffic_light+0x2fc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fb9a 	bl	80019a8 <Set_timer>
					timer_scan_7seg(north_south, &tmp_red_traffic_led_time);
 8001274:	498c      	ldr	r1, [pc, #560]	; (80014a8 <fsm_traffic_light+0x2f4>)
 8001276:	4887      	ldr	r0, [pc, #540]	; (8001494 <fsm_traffic_light+0x2e0>)
 8001278:	f7ff fee0 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 800127c:	f7ff ff16 	bl	80010ac <enable_trigger_scan>
					break;
 8001280:	e050      	b.n	8001324 <fsm_traffic_light+0x170>
					display_traffic_led(yellow_traffic_led, north_south);
 8001282:	4984      	ldr	r1, [pc, #528]	; (8001494 <fsm_traffic_light+0x2e0>)
 8001284:	201f      	movs	r0, #31
 8001286:	f7ff fdaf 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 800128a:	f7ff fe75 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_yellow_traffic_led_time, &index_0, &index_1);
 800128e:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <fsm_traffic_light+0x300>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1d3a      	adds	r2, r7, #4
 8001294:	f107 0108 	add.w	r1, r7, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff feab 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, north_south);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4a7c      	ldr	r2, [pc, #496]	; (8001494 <fsm_traffic_light+0x2e0>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff21 	bl	80010ec <enable_display_7seg>
					if(timer_flag[north_south_led_time]== 1)
 80012aa:	4b80      	ldr	r3, [pc, #512]	; (80014ac <fsm_traffic_light+0x2f8>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <fsm_traffic_light+0x110>
						status_traffic_led_north_south = red_traffic_led;
 80012b2:	4b7a      	ldr	r3, [pc, #488]	; (800149c <fsm_traffic_light+0x2e8>)
 80012b4:	221e      	movs	r2, #30
 80012b6:	601a      	str	r2, [r3, #0]
						Set_timer(red_traffic_led_time, north_south_led_time);
 80012b8:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <fsm_traffic_light+0x2f0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fb72 	bl	80019a8 <Set_timer>
					timer_scan_7seg(north_south, &tmp_yellow_traffic_led_time);
 80012c4:	497b      	ldr	r1, [pc, #492]	; (80014b4 <fsm_traffic_light+0x300>)
 80012c6:	4873      	ldr	r0, [pc, #460]	; (8001494 <fsm_traffic_light+0x2e0>)
 80012c8:	f7ff feb8 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 80012cc:	f7ff feee 	bl	80010ac <enable_trigger_scan>
					break;
 80012d0:	e028      	b.n	8001324 <fsm_traffic_light+0x170>
					display_traffic_led(green_traffic_led, north_south);
 80012d2:	4970      	ldr	r1, [pc, #448]	; (8001494 <fsm_traffic_light+0x2e0>)
 80012d4:	2020      	movs	r0, #32
 80012d6:	f7ff fd87 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 80012da:	f7ff fe4d 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_green_traffic_led_time, &index_0, &index_1);
 80012de:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <fsm_traffic_light+0x304>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	1d3a      	adds	r2, r7, #4
 80012e4:	f107 0108 	add.w	r1, r7, #8
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe83 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, north_south);
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4a68      	ldr	r2, [pc, #416]	; (8001494 <fsm_traffic_light+0x2e0>)
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fef9 	bl	80010ec <enable_display_7seg>
					if(timer_flag[north_south_led_time]== 1)
 80012fa:	4b6c      	ldr	r3, [pc, #432]	; (80014ac <fsm_traffic_light+0x2f8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d108      	bne.n	8001314 <fsm_traffic_light+0x160>
						status_traffic_led_north_south = yellow_traffic_led;
 8001302:	4b66      	ldr	r3, [pc, #408]	; (800149c <fsm_traffic_light+0x2e8>)
 8001304:	221f      	movs	r2, #31
 8001306:	601a      	str	r2, [r3, #0]
						Set_timer(yellow_traffic_led_time, north_south_led_time);
 8001308:	4b6c      	ldr	r3, [pc, #432]	; (80014bc <fsm_traffic_light+0x308>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fb4a 	bl	80019a8 <Set_timer>
					timer_scan_7seg(north_south, &tmp_green_traffic_led_time);
 8001314:	4968      	ldr	r1, [pc, #416]	; (80014b8 <fsm_traffic_light+0x304>)
 8001316:	485f      	ldr	r0, [pc, #380]	; (8001494 <fsm_traffic_light+0x2e0>)
 8001318:	f7ff fe90 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 800131c:	f7ff fec6 	bl	80010ac <enable_trigger_scan>
					break;
 8001320:	e000      	b.n	8001324 <fsm_traffic_light+0x170>
					break;
 8001322:	bf00      	nop
			switch (status_traffic_led_east_west) {
 8001324:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <fsm_traffic_light+0x30c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d00c      	beq.n	8001346 <fsm_traffic_light+0x192>
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	f300 809d 	bgt.w	800146c <fsm_traffic_light+0x2b8>
 8001332:	2b20      	cmp	r3, #32
 8001334:	d072      	beq.n	800141c <fsm_traffic_light+0x268>
 8001336:	2b20      	cmp	r3, #32
 8001338:	f300 8098 	bgt.w	800146c <fsm_traffic_light+0x2b8>
 800133c:	2b1e      	cmp	r3, #30
 800133e:	d01d      	beq.n	800137c <fsm_traffic_light+0x1c8>
 8001340:	2b1f      	cmp	r3, #31
 8001342:	d043      	beq.n	80013cc <fsm_traffic_light+0x218>
					break;
 8001344:	e092      	b.n	800146c <fsm_traffic_light+0x2b8>
					display_traffic_led(green_traffic_led, east_west);
 8001346:	4954      	ldr	r1, [pc, #336]	; (8001498 <fsm_traffic_light+0x2e4>)
 8001348:	2020      	movs	r0, #32
 800134a:	f7ff fd4d 	bl	8000de8 <display_traffic_led>
					status_traffic_led_east_west = green_traffic_led;
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <fsm_traffic_light+0x30c>)
 8001350:	2220      	movs	r2, #32
 8001352:	601a      	str	r2, [r3, #0]
					tmp_val_init();
 8001354:	f7ff fdde 	bl	8000f14 <tmp_val_init>
					enable_trigger = 0;
 8001358:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <fsm_traffic_light+0x2ec>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
					Set_timer(green_traffic_led_time, east_west_led_time);
 800135e:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <fsm_traffic_light+0x2fc>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2101      	movs	r1, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f000 fb1f 	bl	80019a8 <Set_timer>
					Set_timer(100,east_west_7seg_time);
 800136a:	2103      	movs	r1, #3
 800136c:	2064      	movs	r0, #100	; 0x64
 800136e:	f000 fb1b 	bl	80019a8 <Set_timer>
					Set_timer(50, enable_time);
 8001372:	2104      	movs	r1, #4
 8001374:	2032      	movs	r0, #50	; 0x32
 8001376:	f000 fb17 	bl	80019a8 <Set_timer>
					break;
 800137a:	e078      	b.n	800146e <fsm_traffic_light+0x2ba>
					display_traffic_led(red_traffic_led, east_west);
 800137c:	4946      	ldr	r1, [pc, #280]	; (8001498 <fsm_traffic_light+0x2e4>)
 800137e:	201e      	movs	r0, #30
 8001380:	f7ff fd32 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 8001384:	f7ff fdf8 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_red_traffic_led_time, &index_0, &index_1);
 8001388:	4b47      	ldr	r3, [pc, #284]	; (80014a8 <fsm_traffic_light+0x2f4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1d3a      	adds	r2, r7, #4
 800138e:	f107 0108 	add.w	r1, r7, #8
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fe2e 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, east_west);
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <fsm_traffic_light+0x2e4>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fea4 	bl	80010ec <enable_display_7seg>
					if(timer_flag[east_west_led_time]== 1)
 80013a4:	4b41      	ldr	r3, [pc, #260]	; (80014ac <fsm_traffic_light+0x2f8>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d108      	bne.n	80013be <fsm_traffic_light+0x20a>
						status_traffic_led_east_west = green_traffic_led;
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <fsm_traffic_light+0x30c>)
 80013ae:	2220      	movs	r2, #32
 80013b0:	601a      	str	r2, [r3, #0]
						Set_timer(green_traffic_led_time, east_west_led_time);
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <fsm_traffic_light+0x2fc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2101      	movs	r1, #1
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 faf5 	bl	80019a8 <Set_timer>
					timer_scan_7seg(east_west, &tmp_red_traffic_led_time);
 80013be:	493a      	ldr	r1, [pc, #232]	; (80014a8 <fsm_traffic_light+0x2f4>)
 80013c0:	4835      	ldr	r0, [pc, #212]	; (8001498 <fsm_traffic_light+0x2e4>)
 80013c2:	f7ff fe3b 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 80013c6:	f7ff fe71 	bl	80010ac <enable_trigger_scan>
					break;
 80013ca:	e050      	b.n	800146e <fsm_traffic_light+0x2ba>
					display_traffic_led(yellow_traffic_led, east_west);
 80013cc:	4932      	ldr	r1, [pc, #200]	; (8001498 <fsm_traffic_light+0x2e4>)
 80013ce:	201f      	movs	r0, #31
 80013d0:	f7ff fd0a 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 80013d4:	f7ff fdd0 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_yellow_traffic_led_time, &index_0, &index_1);
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <fsm_traffic_light+0x300>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	1d3a      	adds	r2, r7, #4
 80013de:	f107 0108 	add.w	r1, r7, #8
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe06 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, east_west);
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	4a2a      	ldr	r2, [pc, #168]	; (8001498 <fsm_traffic_light+0x2e4>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe7c 	bl	80010ec <enable_display_7seg>
					if(timer_flag[east_west_led_time]== 1)
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <fsm_traffic_light+0x2f8>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d108      	bne.n	800140e <fsm_traffic_light+0x25a>
						status_traffic_led_east_west = red_traffic_led;
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <fsm_traffic_light+0x30c>)
 80013fe:	221e      	movs	r2, #30
 8001400:	601a      	str	r2, [r3, #0]
						Set_timer(red_traffic_led_time, east_west_led_time);
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <fsm_traffic_light+0x2f0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f000 facd 	bl	80019a8 <Set_timer>
					timer_scan_7seg(east_west, &tmp_yellow_traffic_led_time);
 800140e:	4929      	ldr	r1, [pc, #164]	; (80014b4 <fsm_traffic_light+0x300>)
 8001410:	4821      	ldr	r0, [pc, #132]	; (8001498 <fsm_traffic_light+0x2e4>)
 8001412:	f7ff fe13 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 8001416:	f7ff fe49 	bl	80010ac <enable_trigger_scan>
					break;
 800141a:	e028      	b.n	800146e <fsm_traffic_light+0x2ba>
					display_traffic_led(green_traffic_led, east_west);
 800141c:	491e      	ldr	r1, [pc, #120]	; (8001498 <fsm_traffic_light+0x2e4>)
 800141e:	2020      	movs	r0, #32
 8001420:	f7ff fce2 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 8001424:	f7ff fda8 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_green_traffic_led_time, &index_0, &index_1);
 8001428:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <fsm_traffic_light+0x304>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1d3a      	adds	r2, r7, #4
 800142e:	f107 0108 	add.w	r1, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fdde 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, east_west);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4a16      	ldr	r2, [pc, #88]	; (8001498 <fsm_traffic_light+0x2e4>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fe54 	bl	80010ec <enable_display_7seg>
					if(timer_flag[east_west_led_time]== 1)
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <fsm_traffic_light+0x2f8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <fsm_traffic_light+0x2aa>
						status_traffic_led_east_west = yellow_traffic_led;
 800144c:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <fsm_traffic_light+0x30c>)
 800144e:	221f      	movs	r2, #31
 8001450:	601a      	str	r2, [r3, #0]
						Set_timer(yellow_traffic_led_time, east_west_led_time);
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <fsm_traffic_light+0x308>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2101      	movs	r1, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f000 faa5 	bl	80019a8 <Set_timer>
					timer_scan_7seg(east_west, &tmp_green_traffic_led_time);
 800145e:	4916      	ldr	r1, [pc, #88]	; (80014b8 <fsm_traffic_light+0x304>)
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <fsm_traffic_light+0x2e4>)
 8001462:	f7ff fdeb 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 8001466:	f7ff fe21 	bl	80010ac <enable_trigger_scan>
					break;
 800146a:	e000      	b.n	800146e <fsm_traffic_light+0x2ba>
					break;
 800146c:	bf00      	nop
			break;
 800146e:	e163      	b.n	8001738 <fsm_traffic_light+0x584>
			switch (status_traffic_led_north_south) {
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <fsm_traffic_light+0x2e8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2bff      	cmp	r3, #255	; 0xff
 8001476:	d025      	beq.n	80014c4 <fsm_traffic_light+0x310>
 8001478:	2bff      	cmp	r3, #255	; 0xff
 800147a:	f300 80b6 	bgt.w	80015ea <fsm_traffic_light+0x436>
 800147e:	2b20      	cmp	r3, #32
 8001480:	f000 808b 	beq.w	800159a <fsm_traffic_light+0x3e6>
 8001484:	2b20      	cmp	r3, #32
 8001486:	f300 80b0 	bgt.w	80015ea <fsm_traffic_light+0x436>
 800148a:	2b1e      	cmp	r3, #30
 800148c:	d035      	beq.n	80014fa <fsm_traffic_light+0x346>
 800148e:	2b1f      	cmp	r3, #31
 8001490:	d05b      	beq.n	800154a <fsm_traffic_light+0x396>
					break;
 8001492:	e0aa      	b.n	80015ea <fsm_traffic_light+0x436>
 8001494:	075bcd15 	.word	0x075bcd15
 8001498:	3ade68b1 	.word	0x3ade68b1
 800149c:	2000003c 	.word	0x2000003c
 80014a0:	2000009c 	.word	0x2000009c
 80014a4:	20000044 	.word	0x20000044
 80014a8:	20000090 	.word	0x20000090
 80014ac:	200000e8 	.word	0x200000e8
 80014b0:	2000004c 	.word	0x2000004c
 80014b4:	20000094 	.word	0x20000094
 80014b8:	20000098 	.word	0x20000098
 80014bc:	20000048 	.word	0x20000048
 80014c0:	20000040 	.word	0x20000040
					display_traffic_led(green_traffic_led, north_south);
 80014c4:	499e      	ldr	r1, [pc, #632]	; (8001740 <fsm_traffic_light+0x58c>)
 80014c6:	2020      	movs	r0, #32
 80014c8:	f7ff fc8e 	bl	8000de8 <display_traffic_led>
					status_traffic_led_north_south = green_traffic_led;
 80014cc:	4b9d      	ldr	r3, [pc, #628]	; (8001744 <fsm_traffic_light+0x590>)
 80014ce:	2220      	movs	r2, #32
 80014d0:	601a      	str	r2, [r3, #0]
					tmp_val_init();
 80014d2:	f7ff fd1f 	bl	8000f14 <tmp_val_init>
					enable_trigger = 0;
 80014d6:	4b9c      	ldr	r3, [pc, #624]	; (8001748 <fsm_traffic_light+0x594>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
					Set_timer(green_traffic_led_time, north_south_led_time);
 80014dc:	4b9b      	ldr	r3, [pc, #620]	; (800174c <fsm_traffic_light+0x598>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fa60 	bl	80019a8 <Set_timer>
					Set_timer(100,north_south_7seg_time);
 80014e8:	2102      	movs	r1, #2
 80014ea:	2064      	movs	r0, #100	; 0x64
 80014ec:	f000 fa5c 	bl	80019a8 <Set_timer>
					Set_timer(50, enable_time);
 80014f0:	2104      	movs	r1, #4
 80014f2:	2032      	movs	r0, #50	; 0x32
 80014f4:	f000 fa58 	bl	80019a8 <Set_timer>
					break;
 80014f8:	e078      	b.n	80015ec <fsm_traffic_light+0x438>
					display_traffic_led(red_traffic_led, north_south);
 80014fa:	4991      	ldr	r1, [pc, #580]	; (8001740 <fsm_traffic_light+0x58c>)
 80014fc:	201e      	movs	r0, #30
 80014fe:	f7ff fc73 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 8001502:	f7ff fd39 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_red_traffic_led_time, &index_0, &index_1);
 8001506:	4b92      	ldr	r3, [pc, #584]	; (8001750 <fsm_traffic_light+0x59c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	1d3a      	adds	r2, r7, #4
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fd6f 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, north_south);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4a89      	ldr	r2, [pc, #548]	; (8001740 <fsm_traffic_light+0x58c>)
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fde5 	bl	80010ec <enable_display_7seg>
					if(timer_flag[north_south_led_time]== 1)
 8001522:	4b8c      	ldr	r3, [pc, #560]	; (8001754 <fsm_traffic_light+0x5a0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <fsm_traffic_light+0x388>
						status_traffic_led_north_south = green_traffic_led;
 800152a:	4b86      	ldr	r3, [pc, #536]	; (8001744 <fsm_traffic_light+0x590>)
 800152c:	2220      	movs	r2, #32
 800152e:	601a      	str	r2, [r3, #0]
						Set_timer(green_traffic_led_time, north_south_led_time);
 8001530:	4b86      	ldr	r3, [pc, #536]	; (800174c <fsm_traffic_light+0x598>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fa36 	bl	80019a8 <Set_timer>
					timer_scan_7seg(north_south, &tmp_red_traffic_led_time);
 800153c:	4984      	ldr	r1, [pc, #528]	; (8001750 <fsm_traffic_light+0x59c>)
 800153e:	4880      	ldr	r0, [pc, #512]	; (8001740 <fsm_traffic_light+0x58c>)
 8001540:	f7ff fd7c 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 8001544:	f7ff fdb2 	bl	80010ac <enable_trigger_scan>
					break;
 8001548:	e050      	b.n	80015ec <fsm_traffic_light+0x438>
					display_traffic_led(yellow_traffic_led, north_south);
 800154a:	497d      	ldr	r1, [pc, #500]	; (8001740 <fsm_traffic_light+0x58c>)
 800154c:	201f      	movs	r0, #31
 800154e:	f7ff fc4b 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 8001552:	f7ff fd11 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_yellow_traffic_led_time, &index_0, &index_1);
 8001556:	4b80      	ldr	r3, [pc, #512]	; (8001758 <fsm_traffic_light+0x5a4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1d3a      	adds	r2, r7, #4
 800155c:	f107 0108 	add.w	r1, r7, #8
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fd47 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, north_south);
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4a75      	ldr	r2, [pc, #468]	; (8001740 <fsm_traffic_light+0x58c>)
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fdbd 	bl	80010ec <enable_display_7seg>
					if(timer_flag[north_south_led_time]== 1)
 8001572:	4b78      	ldr	r3, [pc, #480]	; (8001754 <fsm_traffic_light+0x5a0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <fsm_traffic_light+0x3d8>
						status_traffic_led_north_south = red_traffic_led;
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <fsm_traffic_light+0x590>)
 800157c:	221e      	movs	r2, #30
 800157e:	601a      	str	r2, [r3, #0]
						Set_timer(red_traffic_led_time, north_south_led_time);
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <fsm_traffic_light+0x5a8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fa0e 	bl	80019a8 <Set_timer>
					timer_scan_7seg(north_south, &tmp_yellow_traffic_led_time);
 800158c:	4972      	ldr	r1, [pc, #456]	; (8001758 <fsm_traffic_light+0x5a4>)
 800158e:	486c      	ldr	r0, [pc, #432]	; (8001740 <fsm_traffic_light+0x58c>)
 8001590:	f7ff fd54 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 8001594:	f7ff fd8a 	bl	80010ac <enable_trigger_scan>
					break;
 8001598:	e028      	b.n	80015ec <fsm_traffic_light+0x438>
					display_traffic_led(green_traffic_led, north_south);
 800159a:	4969      	ldr	r1, [pc, #420]	; (8001740 <fsm_traffic_light+0x58c>)
 800159c:	2020      	movs	r0, #32
 800159e:	f7ff fc23 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 80015a2:	f7ff fce9 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_green_traffic_led_time, &index_0, &index_1);
 80015a6:	4b6e      	ldr	r3, [pc, #440]	; (8001760 <fsm_traffic_light+0x5ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1d3a      	adds	r2, r7, #4
 80015ac:	f107 0108 	add.w	r1, r7, #8
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fd1f 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, north_south);
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4a61      	ldr	r2, [pc, #388]	; (8001740 <fsm_traffic_light+0x58c>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fd95 	bl	80010ec <enable_display_7seg>
					if(timer_flag[north_south_led_time]== 1)
 80015c2:	4b64      	ldr	r3, [pc, #400]	; (8001754 <fsm_traffic_light+0x5a0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <fsm_traffic_light+0x428>
						status_traffic_led_north_south = yellow_traffic_led;
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <fsm_traffic_light+0x590>)
 80015cc:	221f      	movs	r2, #31
 80015ce:	601a      	str	r2, [r3, #0]
						Set_timer(yellow_traffic_led_time, north_south_led_time);
 80015d0:	4b64      	ldr	r3, [pc, #400]	; (8001764 <fsm_traffic_light+0x5b0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f9e6 	bl	80019a8 <Set_timer>
					timer_scan_7seg(north_south, &tmp_green_traffic_led_time);
 80015dc:	4960      	ldr	r1, [pc, #384]	; (8001760 <fsm_traffic_light+0x5ac>)
 80015de:	4858      	ldr	r0, [pc, #352]	; (8001740 <fsm_traffic_light+0x58c>)
 80015e0:	f7ff fd2c 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 80015e4:	f7ff fd62 	bl	80010ac <enable_trigger_scan>
					break;
 80015e8:	e000      	b.n	80015ec <fsm_traffic_light+0x438>
					break;
 80015ea:	bf00      	nop
			switch (status_traffic_led_east_west) {
 80015ec:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <fsm_traffic_light+0x5b4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d00c      	beq.n	800160e <fsm_traffic_light+0x45a>
 80015f4:	2bff      	cmp	r3, #255	; 0xff
 80015f6:	f300 809d 	bgt.w	8001734 <fsm_traffic_light+0x580>
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d072      	beq.n	80016e4 <fsm_traffic_light+0x530>
 80015fe:	2b20      	cmp	r3, #32
 8001600:	f300 8098 	bgt.w	8001734 <fsm_traffic_light+0x580>
 8001604:	2b1e      	cmp	r3, #30
 8001606:	d01d      	beq.n	8001644 <fsm_traffic_light+0x490>
 8001608:	2b1f      	cmp	r3, #31
 800160a:	d043      	beq.n	8001694 <fsm_traffic_light+0x4e0>
					break;
 800160c:	e092      	b.n	8001734 <fsm_traffic_light+0x580>
					display_traffic_led(red_traffic_led, east_west);
 800160e:	4957      	ldr	r1, [pc, #348]	; (800176c <fsm_traffic_light+0x5b8>)
 8001610:	201e      	movs	r0, #30
 8001612:	f7ff fbe9 	bl	8000de8 <display_traffic_led>
					status_traffic_led_east_west = red_traffic_led;
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <fsm_traffic_light+0x5b4>)
 8001618:	221e      	movs	r2, #30
 800161a:	601a      	str	r2, [r3, #0]
					tmp_val_init();
 800161c:	f7ff fc7a 	bl	8000f14 <tmp_val_init>
					enable_trigger = 0;
 8001620:	4b49      	ldr	r3, [pc, #292]	; (8001748 <fsm_traffic_light+0x594>)
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
					Set_timer(red_traffic_led_time, east_west_led_time);
 8001626:	4b4d      	ldr	r3, [pc, #308]	; (800175c <fsm_traffic_light+0x5a8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2101      	movs	r1, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f9bb 	bl	80019a8 <Set_timer>
					Set_timer(100,east_west_7seg_time);
 8001632:	2103      	movs	r1, #3
 8001634:	2064      	movs	r0, #100	; 0x64
 8001636:	f000 f9b7 	bl	80019a8 <Set_timer>
					Set_timer(50, enable_time);
 800163a:	2104      	movs	r1, #4
 800163c:	2032      	movs	r0, #50	; 0x32
 800163e:	f000 f9b3 	bl	80019a8 <Set_timer>
					break;
 8001642:	e078      	b.n	8001736 <fsm_traffic_light+0x582>
					display_traffic_led(red_traffic_led, east_west);
 8001644:	4949      	ldr	r1, [pc, #292]	; (800176c <fsm_traffic_light+0x5b8>)
 8001646:	201e      	movs	r0, #30
 8001648:	f7ff fbce 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 800164c:	f7ff fc94 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_red_traffic_led_time, &index_0, &index_1);
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <fsm_traffic_light+0x59c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	1d3a      	adds	r2, r7, #4
 8001656:	f107 0108 	add.w	r1, r7, #8
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fcca 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, east_west);
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4a41      	ldr	r2, [pc, #260]	; (800176c <fsm_traffic_light+0x5b8>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd40 	bl	80010ec <enable_display_7seg>
					if(timer_flag[east_west_led_time]== 1)
 800166c:	4b39      	ldr	r3, [pc, #228]	; (8001754 <fsm_traffic_light+0x5a0>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d108      	bne.n	8001686 <fsm_traffic_light+0x4d2>
						status_traffic_led_east_west = green_traffic_led;
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <fsm_traffic_light+0x5b4>)
 8001676:	2220      	movs	r2, #32
 8001678:	601a      	str	r2, [r3, #0]
						Set_timer(green_traffic_led_time, east_west_led_time);
 800167a:	4b34      	ldr	r3, [pc, #208]	; (800174c <fsm_traffic_light+0x598>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2101      	movs	r1, #1
 8001680:	4618      	mov	r0, r3
 8001682:	f000 f991 	bl	80019a8 <Set_timer>
					timer_scan_7seg(east_west, &tmp_red_traffic_led_time);
 8001686:	4932      	ldr	r1, [pc, #200]	; (8001750 <fsm_traffic_light+0x59c>)
 8001688:	4838      	ldr	r0, [pc, #224]	; (800176c <fsm_traffic_light+0x5b8>)
 800168a:	f7ff fcd7 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 800168e:	f7ff fd0d 	bl	80010ac <enable_trigger_scan>
					break;
 8001692:	e050      	b.n	8001736 <fsm_traffic_light+0x582>
					display_traffic_led(yellow_traffic_led, east_west);
 8001694:	4935      	ldr	r1, [pc, #212]	; (800176c <fsm_traffic_light+0x5b8>)
 8001696:	201f      	movs	r0, #31
 8001698:	f7ff fba6 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 800169c:	f7ff fc6c 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_yellow_traffic_led_time, &index_0, &index_1);
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <fsm_traffic_light+0x5a4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1d3a      	adds	r2, r7, #4
 80016a6:	f107 0108 	add.w	r1, r7, #8
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fca2 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, east_west);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4a2d      	ldr	r2, [pc, #180]	; (800176c <fsm_traffic_light+0x5b8>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fd18 	bl	80010ec <enable_display_7seg>
					if(timer_flag[east_west_led_time]== 1)
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <fsm_traffic_light+0x5a0>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <fsm_traffic_light+0x522>
						status_traffic_led_east_west = red_traffic_led;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <fsm_traffic_light+0x5b4>)
 80016c6:	221e      	movs	r2, #30
 80016c8:	601a      	str	r2, [r3, #0]
						Set_timer(red_traffic_led_time, east_west_led_time);
 80016ca:	4b24      	ldr	r3, [pc, #144]	; (800175c <fsm_traffic_light+0x5a8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f969 	bl	80019a8 <Set_timer>
					timer_scan_7seg(east_west, &tmp_yellow_traffic_led_time);
 80016d6:	4920      	ldr	r1, [pc, #128]	; (8001758 <fsm_traffic_light+0x5a4>)
 80016d8:	4824      	ldr	r0, [pc, #144]	; (800176c <fsm_traffic_light+0x5b8>)
 80016da:	f7ff fcaf 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 80016de:	f7ff fce5 	bl	80010ac <enable_trigger_scan>
					break;
 80016e2:	e028      	b.n	8001736 <fsm_traffic_light+0x582>
					display_traffic_led(green_traffic_led, east_west);
 80016e4:	4921      	ldr	r1, [pc, #132]	; (800176c <fsm_traffic_light+0x5b8>)
 80016e6:	2020      	movs	r0, #32
 80016e8:	f7ff fb7e 	bl	8000de8 <display_traffic_led>
					tmp_val_overload();
 80016ec:	f7ff fc44 	bl	8000f78 <tmp_val_overload>
					number_processing(tmp_green_traffic_led_time, &index_0, &index_1);
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <fsm_traffic_light+0x5ac>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	1d3a      	adds	r2, r7, #4
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fc7a 	bl	8000ff4 <number_processing>
					enable_display_7seg(index_0, index_1, east_west);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <fsm_traffic_light+0x5b8>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fcf0 	bl	80010ec <enable_display_7seg>
					if(timer_flag[east_west_led_time]== 1)
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <fsm_traffic_light+0x5a0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <fsm_traffic_light+0x572>
						status_traffic_led_east_west = yellow_traffic_led;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <fsm_traffic_light+0x5b4>)
 8001716:	221f      	movs	r2, #31
 8001718:	601a      	str	r2, [r3, #0]
						Set_timer(yellow_traffic_led_time, east_west_led_time);
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <fsm_traffic_light+0x5b0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	4618      	mov	r0, r3
 8001722:	f000 f941 	bl	80019a8 <Set_timer>
					timer_scan_7seg(east_west, &tmp_green_traffic_led_time);
 8001726:	490e      	ldr	r1, [pc, #56]	; (8001760 <fsm_traffic_light+0x5ac>)
 8001728:	4810      	ldr	r0, [pc, #64]	; (800176c <fsm_traffic_light+0x5b8>)
 800172a:	f7ff fc87 	bl	800103c <timer_scan_7seg>
					enable_trigger_scan();
 800172e:	f7ff fcbd 	bl	80010ac <enable_trigger_scan>
					break;
 8001732:	e000      	b.n	8001736 <fsm_traffic_light+0x582>
					break;
 8001734:	bf00      	nop
			break;
 8001736:	bf00      	nop
	}
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	075bcd15 	.word	0x075bcd15
 8001744:	2000003c 	.word	0x2000003c
 8001748:	2000009c 	.word	0x2000009c
 800174c:	2000004c 	.word	0x2000004c
 8001750:	20000090 	.word	0x20000090
 8001754:	200000e8 	.word	0x200000e8
 8001758:	20000094 	.word	0x20000094
 800175c:	20000044 	.word	0x20000044
 8001760:	20000098 	.word	0x20000098
 8001764:	20000048 	.word	0x20000048
 8001768:	20000040 	.word	0x20000040
 800176c:	3ade68b1 	.word	0x3ade68b1

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001774:	f000 fa16 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001778:	f000 f80c 	bl	8001794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800177c:	f000 f892 	bl	80018a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001780:	f000 f844 	bl	800180c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <main+0x20>)
 8001786:	f001 f95f 	bl	8002a48 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_mode();
 800178a:	f7fe ff01 	bl	8000590 <fsm_mode>
 800178e:	e7fc      	b.n	800178a <main+0x1a>
 8001790:	20000130 	.word	0x20000130

08001794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b090      	sub	sp, #64	; 0x40
 8001798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	2228      	movs	r2, #40	; 0x28
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f001 fd08 	bl	80031b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017be:	2310      	movs	r3, #16
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fd04 	bl	80021d8 <HAL_RCC_OscConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80017d6:	f000 f8e1 	bl	800199c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017da:	230f      	movs	r3, #15
 80017dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 ff70 	bl	80026d8 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80017fe:	f000 f8cd 	bl	800199c <Error_Handler>
  }
}
 8001802:	bf00      	nop
 8001804:	3740      	adds	r7, #64	; 0x40
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_TIM2_Init+0x94>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000 - 1;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001832:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_TIM2_Init+0x94>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10 - 1;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001840:	2209      	movs	r2, #9
 8001842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_TIM2_Init+0x94>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001850:	4813      	ldr	r0, [pc, #76]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001852:	f001 f8a9 	bl	80029a8 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800185c:	f000 f89e 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_TIM2_Init+0x94>)
 800186e:	f001 fa3f 	bl	8002cf0 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001878:	f000 f890 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187c:	2300      	movs	r3, #0
 800187e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_TIM2_Init+0x94>)
 800188a:	f001 fc07 	bl	800309c <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001894:	f000 f882 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000130 	.word	0x20000130

080018a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018aa:	f107 0310 	add.w	r3, r7, #16
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018be:	f043 0310 	orr.w	r3, r3, #16
 80018c2:	6193      	str	r3, [r2, #24]
 80018c4:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a27      	ldr	r2, [pc, #156]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018ee:	f043 0308 	orr.w	r3, r3, #8
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_GPIO_Init+0xd0>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led_north_south_red_Pin|led_north_south_yellow_Pin|led_north_south_green_Pin|led_east_west_red_Pin
 8001900:	2200      	movs	r2, #0
 8001902:	217e      	movs	r1, #126	; 0x7e
 8001904:	481c      	ldr	r0, [pc, #112]	; (8001978 <MX_GPIO_Init+0xd4>)
 8001906:	f000 fc4e 	bl	80021a6 <HAL_GPIO_WritePin>
                          |led_east_west_yellow_Pin|led_east_west_green_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, enable_0_Pin|enable_1_Pin|seg_north_south_a_Pin|seg_east_west_b_Pin
 800190a:	2200      	movs	r2, #0
 800190c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001910:	481a      	ldr	r0, [pc, #104]	; (800197c <MX_GPIO_Init+0xd8>)
 8001912:	f000 fc48 	bl	80021a6 <HAL_GPIO_WritePin>
                          |seg_east_west_c_Pin|seg_east_west_d_Pin|seg_east_west_e_Pin|seg_east_west_f_Pin
                          |seg_east_west_g_Pin|seg_north_south_b_Pin|seg_north_south_c_Pin|seg_north_south_d_Pin
                          |seg_north_south_e_Pin|seg_north_south_f_Pin|seg_north_south_g_Pin|seg_east_west_a_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : change_mode_Pin change_time_Pin set_time_Pin */
  GPIO_InitStruct.Pin = change_mode_Pin|change_time_Pin|set_time_Pin;
 8001916:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800191a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001920:	2301      	movs	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	4619      	mov	r1, r3
 800192a:	4815      	ldr	r0, [pc, #84]	; (8001980 <MX_GPIO_Init+0xdc>)
 800192c:	f000 faaa 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_north_south_red_Pin led_north_south_yellow_Pin led_north_south_green_Pin led_east_west_red_Pin
                           led_east_west_yellow_Pin led_east_west_green_Pin */
  GPIO_InitStruct.Pin = led_north_south_red_Pin|led_north_south_yellow_Pin|led_north_south_green_Pin|led_east_west_red_Pin
 8001930:	237e      	movs	r3, #126	; 0x7e
 8001932:	613b      	str	r3, [r7, #16]
                          |led_east_west_yellow_Pin|led_east_west_green_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001934:	2301      	movs	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2302      	movs	r3, #2
 800193e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <MX_GPIO_Init+0xd4>)
 8001948:	f000 fa9c 	bl	8001e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : enable_0_Pin enable_1_Pin seg_north_south_a_Pin seg_east_west_b_Pin
                           seg_east_west_c_Pin seg_east_west_d_Pin seg_east_west_e_Pin seg_east_west_f_Pin
                           seg_east_west_g_Pin seg_north_south_b_Pin seg_north_south_c_Pin seg_north_south_d_Pin
                           seg_north_south_e_Pin seg_north_south_f_Pin seg_north_south_g_Pin seg_east_west_a_Pin */
  GPIO_InitStruct.Pin = enable_0_Pin|enable_1_Pin|seg_north_south_a_Pin|seg_east_west_b_Pin
 800194c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001950:	613b      	str	r3, [r7, #16]
                          |seg_east_west_c_Pin|seg_east_west_d_Pin|seg_east_west_e_Pin|seg_east_west_f_Pin
                          |seg_east_west_g_Pin|seg_north_south_b_Pin|seg_north_south_c_Pin|seg_north_south_d_Pin
                          |seg_north_south_e_Pin|seg_north_south_f_Pin|seg_north_south_g_Pin|seg_east_west_a_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2302      	movs	r3, #2
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_GPIO_Init+0xd8>)
 8001966:	f000 fa8d 	bl	8001e84 <HAL_GPIO_Init>

}
 800196a:	bf00      	nop
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40011000 	.word	0x40011000

08001984 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	Run_timer();
 800198c:	f000 f824 	bl	80019d8 <Run_timer>
	getKeyInput();
 8001990:	f7fe fc34 	bl	80001fc <getKeyInput>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	e7fe      	b.n	80019a4 <Error_Handler+0x8>
	...

080019a8 <Set_timer>:
		0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0};


void Set_timer(int duration, int arr_pos)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
	timer_counter[arr_pos] = duration;
 80019b2:	4907      	ldr	r1, [pc, #28]	; (80019d0 <Set_timer+0x28>)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[arr_pos] = 0;
 80019bc:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <Set_timer+0x2c>)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2100      	movs	r1, #0
 80019c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	200000a0 	.word	0x200000a0
 80019d4:	200000e8 	.word	0x200000e8

080019d8 <Run_timer>:

void Run_timer()
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
	int i = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
	while(i < timer_arr_size)
 80019e2:	e01c      	b.n	8001a1e <Run_timer+0x46>
	{
		if(timer_counter[i] > 0)
 80019e4:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <Run_timer+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dd13      	ble.n	8001a18 <Run_timer+0x40>
		{
			timer_counter[i]--;
 80019f0:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <Run_timer+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	490e      	ldr	r1, [pc, #56]	; (8001a34 <Run_timer+0x5c>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0)
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <Run_timer+0x5c>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	dc04      	bgt.n	8001a18 <Run_timer+0x40>
			{
				timer_flag[i] = 1;
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <Run_timer+0x60>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2101      	movs	r1, #1
 8001a14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
		}
		i++;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
	while(i < timer_arr_size)
 8001a1e:	2212      	movs	r2, #18
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4293      	cmp	r3, r2
 8001a24:	dbde      	blt.n	80019e4 <Run_timer+0xc>
	}
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200000a0 	.word	0x200000a0
 8001a38:	200000e8 	.word	0x200000e8

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6193      	str	r3, [r2, #24]
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a64:	61d3      	str	r3, [r2, #28]
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_MspInit+0x5c>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_MspInit+0x60>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_MspInit+0x60>)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40010000 	.word	0x40010000

08001aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_TIM_Base_MspInit+0x44>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <HAL_TIM_Base_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201c      	movs	r0, #28
 8001ad0:	f000 f9a1 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad4:	201c      	movs	r0, #28
 8001ad6:	f000 f9ba 	bl	8001e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2e:	f000 f87f 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM2_IRQHandler+0x10>)
 8001b3e:	f000 ffcf 	bl	8002ae0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000130 	.word	0x20000130

08001b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b5a:	490d      	ldr	r1, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b70:	4c0a      	ldr	r4, [pc, #40]	; (8001b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b7e:	f7ff ffe5 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f001 faf5 	bl	8003170 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b86:	f7ff fdf3 	bl	8001770 <main>
  bx lr
 8001b8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001b94:	08003208 	.word	0x08003208
  ldr r2, =_sbss
 8001b98:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b9c:	2000017c 	.word	0x2000017c

08001ba0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC1_2_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x28>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 f923 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff ff3c 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f93b 	bl	8001e6a <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 f903 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000050 	.word	0x20000050
 8001c28:	20000058 	.word	0x20000058
 8001c2c:	20000054 	.word	0x20000054

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_IncTick+0x1c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x20>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a03      	ldr	r2, [pc, #12]	; (8001c50 <HAL_IncTick+0x20>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	20000058 	.word	0x20000058
 8001c50:	20000178 	.word	0x20000178

08001c54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTick;
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_GetTick+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000178 	.word	0x20000178

08001c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c84:	4013      	ands	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	; (8001cac <__NVIC_SetPriorityGrouping+0x44>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb4:	4b04      	ldr	r3, [pc, #16]	; (8001cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	f003 0307 	and.w	r3, r3, #7
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db0b      	blt.n	8001cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	4906      	ldr	r1, [pc, #24]	; (8001d00 <__NVIC_EnableIRQ+0x34>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	2001      	movs	r0, #1
 8001cee:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff90 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff2d 	bl	8001c68 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff42 	bl	8001cb0 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff90 	bl	8001d58 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5f 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff35 	bl	8001ccc <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e148      	b.n	800212a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8137 	bne.w	8002124 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	4aa3      	ldr	r2, [pc, #652]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d05e      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ec0:	4aa1      	ldr	r2, [pc, #644]	; (8002148 <HAL_GPIO_Init+0x2c4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d875      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ec6:	4aa1      	ldr	r2, [pc, #644]	; (800214c <HAL_GPIO_Init+0x2c8>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d058      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ecc:	4a9f      	ldr	r2, [pc, #636]	; (800214c <HAL_GPIO_Init+0x2c8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d86f      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ed2:	4a9f      	ldr	r2, [pc, #636]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d052      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ed8:	4a9d      	ldr	r2, [pc, #628]	; (8002150 <HAL_GPIO_Init+0x2cc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d869      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ede:	4a9d      	ldr	r2, [pc, #628]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d04c      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ee4:	4a9b      	ldr	r2, [pc, #620]	; (8002154 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d863      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001eea:	4a9b      	ldr	r2, [pc, #620]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d046      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
 8001ef0:	4a99      	ldr	r2, [pc, #612]	; (8002158 <HAL_GPIO_Init+0x2d4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d85d      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001ef6:	2b12      	cmp	r3, #18
 8001ef8:	d82a      	bhi.n	8001f50 <HAL_GPIO_Init+0xcc>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d859      	bhi.n	8001fb2 <HAL_GPIO_Init+0x12e>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <HAL_GPIO_Init+0x80>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f7f 	.word	0x08001f7f
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	08001f6b 	.word	0x08001f6b
 8001f10:	08001fad 	.word	0x08001fad
 8001f14:	08001fb3 	.word	0x08001fb3
 8001f18:	08001fb3 	.word	0x08001fb3
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fb3 	.word	0x08001fb3
 8001f24:	08001fb3 	.word	0x08001fb3
 8001f28:	08001fb3 	.word	0x08001fb3
 8001f2c:	08001fb3 	.word	0x08001fb3
 8001f30:	08001fb3 	.word	0x08001fb3
 8001f34:	08001fb3 	.word	0x08001fb3
 8001f38:	08001fb3 	.word	0x08001fb3
 8001f3c:	08001fb3 	.word	0x08001fb3
 8001f40:	08001fb3 	.word	0x08001fb3
 8001f44:	08001fb3 	.word	0x08001fb3
 8001f48:	08001f61 	.word	0x08001f61
 8001f4c:	08001f75 	.word	0x08001f75
 8001f50:	4a82      	ldr	r2, [pc, #520]	; (800215c <HAL_GPIO_Init+0x2d8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f56:	e02c      	b.n	8001fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	623b      	str	r3, [r7, #32]
          break;
 8001f5e:	e029      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	3304      	adds	r3, #4
 8001f66:	623b      	str	r3, [r7, #32]
          break;
 8001f68:	e024      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	3308      	adds	r3, #8
 8001f70:	623b      	str	r3, [r7, #32]
          break;
 8001f72:	e01f      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	330c      	adds	r3, #12
 8001f7a:	623b      	str	r3, [r7, #32]
          break;
 8001f7c:	e01a      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f86:	2304      	movs	r3, #4
 8001f88:	623b      	str	r3, [r7, #32]
          break;
 8001f8a:	e013      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f94:	2308      	movs	r3, #8
 8001f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	611a      	str	r2, [r3, #16]
          break;
 8001f9e:	e009      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	615a      	str	r2, [r3, #20]
          break;
 8001faa:	e003      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fac:	2300      	movs	r3, #0
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_GPIO_Init+0x130>
          break;
 8001fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d801      	bhi.n	8001fbe <HAL_GPIO_Init+0x13a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_Init+0x13e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	2bff      	cmp	r3, #255	; 0xff
 8001fc8:	d802      	bhi.n	8001fd0 <HAL_GPIO_Init+0x14c>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x152>
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3b08      	subs	r3, #8
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	210f      	movs	r1, #15
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	6a39      	ldr	r1, [r7, #32]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 8090 	beq.w	8002124 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <HAL_GPIO_Init+0x2dc>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	4a55      	ldr	r2, [pc, #340]	; (8002160 <HAL_GPIO_Init+0x2dc>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	6193      	str	r3, [r2, #24]
 8002010:	4b53      	ldr	r3, [pc, #332]	; (8002160 <HAL_GPIO_Init+0x2dc>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
 800201a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	3302      	adds	r3, #2
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	220f      	movs	r2, #15
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a49      	ldr	r2, [pc, #292]	; (8002168 <HAL_GPIO_Init+0x2e4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1e0>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a48      	ldr	r2, [pc, #288]	; (800216c <HAL_GPIO_Init+0x2e8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1dc>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a47      	ldr	r2, [pc, #284]	; (8002170 <HAL_GPIO_Init+0x2ec>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1d8>
 8002058:	2302      	movs	r3, #2
 800205a:	e004      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 800205c:	2303      	movs	r3, #3
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 8002060:	2301      	movs	r3, #1
 8002062:	e000      	b.n	8002066 <HAL_GPIO_Init+0x1e2>
 8002064:	2300      	movs	r3, #0
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	f002 0203 	and.w	r2, r2, #3
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	4093      	lsls	r3, r2
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002076:	493b      	ldr	r1, [pc, #236]	; (8002164 <HAL_GPIO_Init+0x2e0>)
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002090:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4937      	ldr	r1, [pc, #220]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e006      	b.n	80020ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800209e:	4b35      	ldr	r3, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	4933      	ldr	r1, [pc, #204]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d006      	beq.n	80020c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	492d      	ldr	r1, [pc, #180]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	4929      	ldr	r1, [pc, #164]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d006      	beq.n	80020ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	4923      	ldr	r1, [pc, #140]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	608b      	str	r3, [r1, #8]
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	491f      	ldr	r1, [pc, #124]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d006      	beq.n	8002116 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	4919      	ldr	r1, [pc, #100]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002116:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	43db      	mvns	r3, r3
 800211e:	4915      	ldr	r1, [pc, #84]	; (8002174 <HAL_GPIO_Init+0x2f0>)
 8002120:	4013      	ands	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	3301      	adds	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	fa22 f303 	lsr.w	r3, r2, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	f47f aeaf 	bne.w	8001e98 <HAL_GPIO_Init+0x14>
  }
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	372c      	adds	r7, #44	; 0x2c
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	10320000 	.word	0x10320000
 800214c:	10310000 	.word	0x10310000
 8002150:	10220000 	.word	0x10220000
 8002154:	10210000 	.word	0x10210000
 8002158:	10120000 	.word	0x10120000
 800215c:	10110000 	.word	0x10110000
 8002160:	40021000 	.word	0x40021000
 8002164:	40010000 	.word	0x40010000
 8002168:	40010800 	.word	0x40010800
 800216c:	40010c00 	.word	0x40010c00
 8002170:	40011000 	.word	0x40011000
 8002174:	40010400 	.word	0x40010400

08002178 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	887b      	ldrh	r3, [r7, #2]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
 8002194:	e001      	b.n	800219a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr

080021a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	807b      	strh	r3, [r7, #2]
 80021b2:	4613      	mov	r3, r2
 80021b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b6:	787b      	ldrb	r3, [r7, #1]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021bc:	887a      	ldrh	r2, [r7, #2]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021c2:	e003      	b.n	80021cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	041a      	lsls	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	611a      	str	r2, [r3, #16]
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e26c      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8087 	beq.w	8002306 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f8:	4b92      	ldr	r3, [pc, #584]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b04      	cmp	r3, #4
 8002202:	d00c      	beq.n	800221e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002204:	4b8f      	ldr	r3, [pc, #572]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b08      	cmp	r3, #8
 800220e:	d112      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
 8002210:	4b8c      	ldr	r3, [pc, #560]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d10b      	bne.n	8002236 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d06c      	beq.n	8002304 <HAL_RCC_OscConfig+0x12c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d168      	bne.n	8002304 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e246      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x76>
 8002240:	4b80      	ldr	r3, [pc, #512]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a7f      	ldr	r2, [pc, #508]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e02e      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x98>
 8002256:	4b7b      	ldr	r3, [pc, #492]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7a      	ldr	r2, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a77      	ldr	r2, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e01d      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0xbc>
 800227a:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a71      	ldr	r2, [pc, #452]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0xd4>
 8002294:	4b6b      	ldr	r3, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6a      	ldr	r2, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800229a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d013      	beq.n	80022dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7ff fcce 	bl	8001c54 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022bc:	f7ff fcca 	bl	8001c54 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1fa      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0xe4>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff fcba 	bl	8001c54 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff fcb6 	bl	8001c54 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1e6      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	4b53      	ldr	r3, [pc, #332]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x10c>
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d063      	beq.n	80023da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11c      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
 800232a:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d116      	bne.n	8002364 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002336:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d005      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e1ba      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4939      	ldr	r1, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002362:	e03a      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d020      	beq.n	80023ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236c:	4b36      	ldr	r3, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x270>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7ff fc6f 	bl	8001c54 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7ff fc6b 	bl	8001c54 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e19b      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]
 80023ac:	e015      	b.n	80023da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b26      	ldr	r3, [pc, #152]	; (8002448 <HAL_RCC_OscConfig+0x270>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fc4e 	bl	8001c54 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023bc:	f7ff fc4a 	bl	8001c54 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e17a      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03a      	beq.n	800245c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_RCC_OscConfig+0x274>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f4:	f7ff fc2e 	bl	8001c54 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fc:	f7ff fc2a 	bl	8001c54 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e15a      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x26c>)
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 faa6 	bl	800296c <RCC_Delay>
 8002420:	e01c      	b.n	800245c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_OscConfig+0x274>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002428:	f7ff fc14 	bl	8001c54 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242e:	e00f      	b.n	8002450 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fc10 	bl	8001c54 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d908      	bls.n	8002450 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e140      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	42420000 	.word	0x42420000
 800244c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	4b9e      	ldr	r3, [pc, #632]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e9      	bne.n	8002430 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a6 	beq.w	80025b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800246e:	4b97      	ldr	r3, [pc, #604]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247a:	4b94      	ldr	r3, [pc, #592]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a93      	ldr	r2, [pc, #588]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]
 8002486:	4b91      	ldr	r3, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002496:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_RCC_OscConfig+0x4f8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d118      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x4f8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a8a      	ldr	r2, [pc, #552]	; (80026d0 <HAL_RCC_OscConfig+0x4f8>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ae:	f7ff fbd1 	bl	8001c54 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7ff fbcd 	bl	8001c54 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0fd      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b81      	ldr	r3, [pc, #516]	; (80026d0 <HAL_RCC_OscConfig+0x4f8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d106      	bne.n	80024ea <HAL_RCC_OscConfig+0x312>
 80024dc:	4b7b      	ldr	r3, [pc, #492]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	4a7a      	ldr	r2, [pc, #488]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6213      	str	r3, [r2, #32]
 80024e8:	e02d      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x334>
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a75      	ldr	r2, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b73      	ldr	r3, [pc, #460]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a72      	ldr	r2, [pc, #456]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	e01c      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b05      	cmp	r3, #5
 8002512:	d10c      	bne.n	800252e <HAL_RCC_OscConfig+0x356>
 8002514:	4b6d      	ldr	r3, [pc, #436]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4a6c      	ldr	r2, [pc, #432]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6213      	str	r3, [r2, #32]
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a69      	ldr	r2, [pc, #420]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	e00b      	b.n	8002546 <HAL_RCC_OscConfig+0x36e>
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a66      	ldr	r2, [pc, #408]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6213      	str	r3, [r2, #32]
 800253a:	4b64      	ldr	r3, [pc, #400]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a63      	ldr	r2, [pc, #396]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d015      	beq.n	800257a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254e:	f7ff fb81 	bl	8001c54 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7ff fb7d 	bl	8001c54 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0ab      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ee      	beq.n	8002556 <HAL_RCC_OscConfig+0x37e>
 8002578:	e014      	b.n	80025a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff fb6b 	bl	8001c54 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	e00a      	b.n	8002598 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002582:	f7ff fb67 	bl	8001c54 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002590:	4293      	cmp	r3, r2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e095      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1ee      	bne.n	8002582 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b48      	ldr	r3, [pc, #288]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a47      	ldr	r2, [pc, #284]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8081 	beq.w	80026c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	4b42      	ldr	r3, [pc, #264]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d061      	beq.n	8002690 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d146      	bne.n	8002662 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b3f      	ldr	r3, [pc, #252]	; (80026d4 <HAL_RCC_OscConfig+0x4fc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fb3b 	bl	8001c54 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7ff fb37 	bl	8001c54 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e067      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	4b35      	ldr	r3, [pc, #212]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002608:	d108      	bne.n	800261c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	492d      	ldr	r1, [pc, #180]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002618:	4313      	orrs	r3, r2
 800261a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a19      	ldr	r1, [r3, #32]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	430b      	orrs	r3, r1
 800262e:	4927      	ldr	r1, [pc, #156]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x4fc>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7ff fb0b 	bl	8001c54 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff fb07 	bl	8001c54 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e037      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	4b1d      	ldr	r3, [pc, #116]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x46a>
 8002660:	e02f      	b.n	80026c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_RCC_OscConfig+0x4fc>)
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff faf4 	bl	8001c54 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7ff faf0 	bl	8001c54 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e020      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x498>
 800268e:	e018      	b.n	80026c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e013      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x4f4>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d001      	beq.n	80026c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
 80026d4:	42420060 	.word	0x42420060

080026d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d0      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b6a      	ldr	r3, [pc, #424]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 0207 	bic.w	r2, r3, #7
 8002702:	4965      	ldr	r1, [pc, #404]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800273e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002756:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d040      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b41      	ldr	r3, [pc, #260]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e073      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3d      	ldr	r3, [pc, #244]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b39      	ldr	r3, [pc, #228]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4936      	ldr	r1, [pc, #216]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff fa44 	bl	8001c54 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7ff fa40 	bl	8001c54 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e053      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d210      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	4922      	ldr	r1, [pc, #136]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f9a2 	bl	8001bd0 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	080031f0 	.word	0x080031f0
 80028a4:	20000050 	.word	0x20000050
 80028a8:	20000054 	.word	0x20000054

080028ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b490      	push	{r4, r7}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028b4:	1d3c      	adds	r4, r7, #4
 80028b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028bc:	f240 2301 	movw	r3, #513	; 0x201
 80028c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028d6:	4b22      	ldr	r3, [pc, #136]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d002      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d003      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x46>
 80028ea:	e02d      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ee:	623b      	str	r3, [r7, #32]
      break;
 80028f0:	e02d      	b.n	800294e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	0c9b      	lsrs	r3, r3, #18
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028fe:	4413      	add	r3, r2
 8002900:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002904:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	0c5b      	lsrs	r3, r3, #17
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800291e:	4413      	add	r3, r2
 8002920:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002924:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	fb02 f203 	mul.w	r2, r2, r3
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
 8002936:	e004      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0xbc>)
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	623b      	str	r3, [r7, #32]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	623b      	str	r3, [r7, #32]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	6a3b      	ldr	r3, [r7, #32]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc90      	pop	{r4, r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	080031e0 	.word	0x080031e0
 8002960:	40021000 	.word	0x40021000
 8002964:	007a1200 	.word	0x007a1200
 8002968:	003d0900 	.word	0x003d0900

0800296c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <RCC_Delay+0x34>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <RCC_Delay+0x38>)
 800297a:	fba2 2303 	umull	r2, r3, r2, r3
 800297e:	0a5b      	lsrs	r3, r3, #9
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	fb02 f303 	mul.w	r3, r2, r3
 8002986:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002988:	bf00      	nop
  }
  while (Delay --);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e5a      	subs	r2, r3, #1
 800298e:	60fa      	str	r2, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f9      	bne.n	8002988 <RCC_Delay+0x1c>
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	20000050 	.word	0x20000050
 80029a4:	10624dd3 	.word	0x10624dd3

080029a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e041      	b.n	8002a3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d106      	bne.n	80029d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f7ff f866 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3304      	adds	r3, #4
 80029e4:	4619      	mov	r1, r3
 80029e6:	4610      	mov	r0, r2
 80029e8:	f000 fa6a 	bl	8002ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d001      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e035      	b.n	8002acc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a16      	ldr	r2, [pc, #88]	; (8002ad8 <HAL_TIM_Base_Start_IT+0x90>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d009      	beq.n	8002a96 <HAL_TIM_Base_Start_IT+0x4e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8a:	d004      	beq.n	8002a96 <HAL_TIM_Base_Start_IT+0x4e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <HAL_TIM_Base_Start_IT+0x94>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d111      	bne.n	8002aba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d010      	beq.n	8002aca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	e007      	b.n	8002aca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40000400 	.word	0x40000400

08002ae0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0202 	mvn.w	r2, #2
 8002b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f9b1 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9a4 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f9b3 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0204 	mvn.w	r2, #4
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2202      	movs	r2, #2
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f987 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f97a 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f989 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0208 	mvn.w	r2, #8
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f95d 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f950 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f95f 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d122      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b10      	cmp	r3, #16
 8002bfe:	d11b      	bne.n	8002c38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0210 	mvn.w	r2, #16
 8002c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2208      	movs	r2, #8
 8002c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f933 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002c24:	e005      	b.n	8002c32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f926 	bl	8002e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f935 	bl	8002e9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10e      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0201 	mvn.w	r2, #1
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fe90 	bl	8001984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d10e      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b80      	cmp	r3, #128	; 0x80
 8002c7e:	d107      	bne.n	8002c90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa67 	bl	800315e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b40      	cmp	r3, #64	; 0x40
 8002c9c:	d10e      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca8:	2b40      	cmp	r3, #64	; 0x40
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8f9 	bl	8002eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d107      	bne.n	8002ce8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0220 	mvn.w	r2, #32
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa32 	bl	800314c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIM_ConfigClockSource+0x18>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0b3      	b.n	8002e70 <HAL_TIM_ConfigClockSource+0x180>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d40:	d03e      	beq.n	8002dc0 <HAL_TIM_ConfigClockSource+0xd0>
 8002d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d46:	f200 8087 	bhi.w	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4e:	f000 8085 	beq.w	8002e5c <HAL_TIM_ConfigClockSource+0x16c>
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d87f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d58:	2b70      	cmp	r3, #112	; 0x70
 8002d5a:	d01a      	beq.n	8002d92 <HAL_TIM_ConfigClockSource+0xa2>
 8002d5c:	2b70      	cmp	r3, #112	; 0x70
 8002d5e:	d87b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d60:	2b60      	cmp	r3, #96	; 0x60
 8002d62:	d050      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x116>
 8002d64:	2b60      	cmp	r3, #96	; 0x60
 8002d66:	d877      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d68:	2b50      	cmp	r3, #80	; 0x50
 8002d6a:	d03c      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0xf6>
 8002d6c:	2b50      	cmp	r3, #80	; 0x50
 8002d6e:	d873      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d058      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x136>
 8002d74:	2b40      	cmp	r3, #64	; 0x40
 8002d76:	d86f      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d78:	2b30      	cmp	r3, #48	; 0x30
 8002d7a:	d064      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x156>
 8002d7c:	2b30      	cmp	r3, #48	; 0x30
 8002d7e:	d86b      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d060      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x156>
 8002d84:	2b20      	cmp	r3, #32
 8002d86:	d867      	bhi.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x156>
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d05a      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d90:	e062      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6899      	ldr	r1, [r3, #8]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f000 f95c 	bl	800305e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002db4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	609a      	str	r2, [r3, #8]
      break;
 8002dbe:	e04e      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f000 f945 	bl	800305e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002de2:	609a      	str	r2, [r3, #8]
      break;
 8002de4:	e03b      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 f8bc 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2150      	movs	r1, #80	; 0x50
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f913 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e04:	e02b      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 f8da 	bl	8002fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2160      	movs	r1, #96	; 0x60
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f903 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e24:	e01b      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6859      	ldr	r1, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f000 f89c 	bl	8002f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2140      	movs	r1, #64	; 0x40
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 f8f3 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 8002e44:	e00b      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f000 f8ea 	bl	800302a <TIM_ITRx_SetConfig>
        break;
 8002e56:	e002      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0xa8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d007      	beq.n	8002ee8 <TIM_Base_SetConfig+0x28>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0x28>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a22      	ldr	r2, [pc, #136]	; (8002f6c <TIM_Base_SetConfig+0xac>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1a      	ldr	r2, [pc, #104]	; (8002f68 <TIM_Base_SetConfig+0xa8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d007      	beq.n	8002f12 <TIM_Base_SetConfig+0x52>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f08:	d003      	beq.n	8002f12 <TIM_Base_SetConfig+0x52>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <TIM_Base_SetConfig+0xac>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d108      	bne.n	8002f24 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <TIM_Base_SetConfig+0xa8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d103      	bne.n	8002f58 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	615a      	str	r2, [r3, #20]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400

08002f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0201 	bic.w	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 030a 	bic.w	r3, r3, #10
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	f023 0210 	bic.w	r2, r3, #16
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	031b      	lsls	r3, r3, #12
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003008:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	621a      	str	r2, [r3, #32]
}
 8003020:	bf00      	nop
 8003022:	371c      	adds	r7, #28
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	f043 0307 	orr.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003078:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	431a      	orrs	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4313      	orrs	r3, r2
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	609a      	str	r2, [r3, #8]
}
 8003092:	bf00      	nop
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e041      	b.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d004      	beq.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a10      	ldr	r2, [pc, #64]	; (8003148 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10c      	bne.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40012c00 	.word	0x40012c00
 8003148:	40000400 	.word	0x40000400

0800314c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <__libc_init_array>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	2600      	movs	r6, #0
 8003174:	4d0c      	ldr	r5, [pc, #48]	; (80031a8 <__libc_init_array+0x38>)
 8003176:	4c0d      	ldr	r4, [pc, #52]	; (80031ac <__libc_init_array+0x3c>)
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	42a6      	cmp	r6, r4
 800317e:	d109      	bne.n	8003194 <__libc_init_array+0x24>
 8003180:	f000 f822 	bl	80031c8 <_init>
 8003184:	2600      	movs	r6, #0
 8003186:	4d0a      	ldr	r5, [pc, #40]	; (80031b0 <__libc_init_array+0x40>)
 8003188:	4c0a      	ldr	r4, [pc, #40]	; (80031b4 <__libc_init_array+0x44>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	42a6      	cmp	r6, r4
 8003190:	d105      	bne.n	800319e <__libc_init_array+0x2e>
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	f855 3b04 	ldr.w	r3, [r5], #4
 8003198:	4798      	blx	r3
 800319a:	3601      	adds	r6, #1
 800319c:	e7ee      	b.n	800317c <__libc_init_array+0xc>
 800319e:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a2:	4798      	blx	r3
 80031a4:	3601      	adds	r6, #1
 80031a6:	e7f2      	b.n	800318e <__libc_init_array+0x1e>
 80031a8:	08003200 	.word	0x08003200
 80031ac:	08003200 	.word	0x08003200
 80031b0:	08003200 	.word	0x08003200
 80031b4:	08003204 	.word	0x08003204

080031b8 <memset>:
 80031b8:	4603      	mov	r3, r0
 80031ba:	4402      	add	r2, r0
 80031bc:	4293      	cmp	r3, r2
 80031be:	d100      	bne.n	80031c2 <memset+0xa>
 80031c0:	4770      	bx	lr
 80031c2:	f803 1b01 	strb.w	r1, [r3], #1
 80031c6:	e7f9      	b.n	80031bc <memset+0x4>

080031c8 <_init>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	bf00      	nop
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr

080031d4 <_fini>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	bf00      	nop
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr
